/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.shopping.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.shopping.model.ShoppingItem;
import com.liferay.shopping.model.ShoppingItemModel;
import com.liferay.shopping.model.ShoppingItemSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ShoppingItem service. Represents a row in the &quot;ShoppingItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ShoppingItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoppingItemImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ShoppingItemModelImpl
	extends BaseModelImpl<ShoppingItem> implements ShoppingItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shopping item model instance should use the <code>ShoppingItem</code> interface instead.
	 */
	public static final String TABLE_NAME = "ShoppingItem";

	public static final Object[][] TABLE_COLUMNS = {
		{"itemId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"categoryId", Types.BIGINT},
		{"sku", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"properties", Types.VARCHAR},
		{"fields_", Types.BOOLEAN}, {"fieldsQuantities", Types.VARCHAR},
		{"minQuantity", Types.INTEGER}, {"maxQuantity", Types.INTEGER},
		{"price", Types.DOUBLE}, {"discount", Types.DOUBLE},
		{"taxable", Types.BOOLEAN}, {"shipping", Types.DOUBLE},
		{"useShippingFormula", Types.BOOLEAN},
		{"requiresShipping", Types.BOOLEAN}, {"stockQuantity", Types.INTEGER},
		{"featured_", Types.BOOLEAN}, {"sale_", Types.BOOLEAN},
		{"smallImage", Types.BOOLEAN}, {"smallImageId", Types.BIGINT},
		{"smallImageURL", Types.VARCHAR}, {"mediumImage", Types.BOOLEAN},
		{"mediumImageId", Types.BIGINT}, {"mediumImageURL", Types.VARCHAR},
		{"largeImage", Types.BOOLEAN}, {"largeImageId", Types.BIGINT},
		{"largeImageURL", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("itemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sku", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("properties", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fields_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fieldsQuantities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("discount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("taxable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("shipping", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("useShippingFormula", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("requiresShipping", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("stockQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("featured_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sale_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("smallImage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("smallImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("smallImageURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mediumImage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("mediumImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mediumImageURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("largeImage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("largeImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("largeImageURL", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ShoppingItem (itemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,categoryId LONG,sku VARCHAR(75) null,name VARCHAR(200) null,description STRING null,properties STRING null,fields_ BOOLEAN,fieldsQuantities STRING null,minQuantity INTEGER,maxQuantity INTEGER,price DOUBLE,discount DOUBLE,taxable BOOLEAN,shipping DOUBLE,useShippingFormula BOOLEAN,requiresShipping BOOLEAN,stockQuantity INTEGER,featured_ BOOLEAN,sale_ BOOLEAN,smallImage BOOLEAN,smallImageId LONG,smallImageURL STRING null,mediumImage BOOLEAN,mediumImageId LONG,mediumImageURL STRING null,largeImage BOOLEAN,largeImageId LONG,largeImageURL STRING null)";

	public static final String TABLE_SQL_DROP = "drop table ShoppingItem";

	public static final String ORDER_BY_JPQL =
		" ORDER BY shoppingItem.itemId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ShoppingItem.itemId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.shopping.model.ShoppingItem"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.shopping.model.ShoppingItem"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.shopping.model.ShoppingItem"),
		true);

	public static final long CATEGORYID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long LARGEIMAGEID_COLUMN_BITMASK = 8L;

	public static final long MEDIUMIMAGEID_COLUMN_BITMASK = 16L;

	public static final long SKU_COLUMN_BITMASK = 32L;

	public static final long SMALLIMAGEID_COLUMN_BITMASK = 64L;

	public static final long ITEMID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ShoppingItem toModel(ShoppingItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ShoppingItem model = new ShoppingItemImpl();

		model.setItemId(soapModel.getItemId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCategoryId(soapModel.getCategoryId());
		model.setSku(soapModel.getSku());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setProperties(soapModel.getProperties());
		model.setFields(soapModel.isFields());
		model.setFieldsQuantities(soapModel.getFieldsQuantities());
		model.setMinQuantity(soapModel.getMinQuantity());
		model.setMaxQuantity(soapModel.getMaxQuantity());
		model.setPrice(soapModel.getPrice());
		model.setDiscount(soapModel.getDiscount());
		model.setTaxable(soapModel.isTaxable());
		model.setShipping(soapModel.getShipping());
		model.setUseShippingFormula(soapModel.isUseShippingFormula());
		model.setRequiresShipping(soapModel.isRequiresShipping());
		model.setStockQuantity(soapModel.getStockQuantity());
		model.setFeatured(soapModel.isFeatured());
		model.setSale(soapModel.isSale());
		model.setSmallImage(soapModel.isSmallImage());
		model.setSmallImageId(soapModel.getSmallImageId());
		model.setSmallImageURL(soapModel.getSmallImageURL());
		model.setMediumImage(soapModel.isMediumImage());
		model.setMediumImageId(soapModel.getMediumImageId());
		model.setMediumImageURL(soapModel.getMediumImageURL());
		model.setLargeImage(soapModel.isLargeImage());
		model.setLargeImageId(soapModel.getLargeImageId());
		model.setLargeImageURL(soapModel.getLargeImageURL());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ShoppingItem> toModels(ShoppingItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ShoppingItem> models = new ArrayList<ShoppingItem>(
			soapModels.length);

		for (ShoppingItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.shopping.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.shopping.model.ShoppingItem"));

	public ShoppingItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ShoppingItem.class;
	}

	@Override
	public String getModelClassName() {
		return ShoppingItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ShoppingItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ShoppingItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingItem, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ShoppingItem)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ShoppingItem, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ShoppingItem, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ShoppingItem)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ShoppingItem, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ShoppingItem, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ShoppingItem, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ShoppingItem, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ShoppingItem, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ShoppingItem, Object>>();
		Map<String, BiConsumer<ShoppingItem, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ShoppingItem, ?>>();

		attributeGetterFunctions.put(
			"itemId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getItemId();
				}

			});
		attributeSetterBiConsumers.put(
			"itemId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object itemId) {
					shoppingItem.setItemId((Long)itemId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object groupId) {
					shoppingItem.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object companyId) {

					shoppingItem.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object userId) {
					shoppingItem.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object userName) {
					shoppingItem.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object createDate) {

					shoppingItem.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object modifiedDate) {

					shoppingItem.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"categoryId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getCategoryId();
				}

			});
		attributeSetterBiConsumers.put(
			"categoryId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object categoryId) {

					shoppingItem.setCategoryId((Long)categoryId);
				}

			});
		attributeGetterFunctions.put(
			"sku",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getSku();
				}

			});
		attributeSetterBiConsumers.put(
			"sku",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object sku) {
					shoppingItem.setSku((String)sku);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object name) {
					shoppingItem.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object description) {

					shoppingItem.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"properties",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getProperties();
				}

			});
		attributeSetterBiConsumers.put(
			"properties",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object properties) {

					shoppingItem.setProperties((String)properties);
				}

			});
		attributeGetterFunctions.put(
			"fields",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getFields();
				}

			});
		attributeSetterBiConsumers.put(
			"fields",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object fields) {
					shoppingItem.setFields((Boolean)fields);
				}

			});
		attributeGetterFunctions.put(
			"fieldsQuantities",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getFieldsQuantities();
				}

			});
		attributeSetterBiConsumers.put(
			"fieldsQuantities",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object fieldsQuantities) {

					shoppingItem.setFieldsQuantities((String)fieldsQuantities);
				}

			});
		attributeGetterFunctions.put(
			"minQuantity",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getMinQuantity();
				}

			});
		attributeSetterBiConsumers.put(
			"minQuantity",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object minQuantity) {

					shoppingItem.setMinQuantity((Integer)minQuantity);
				}

			});
		attributeGetterFunctions.put(
			"maxQuantity",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getMaxQuantity();
				}

			});
		attributeSetterBiConsumers.put(
			"maxQuantity",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object maxQuantity) {

					shoppingItem.setMaxQuantity((Integer)maxQuantity);
				}

			});
		attributeGetterFunctions.put(
			"price",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getPrice();
				}

			});
		attributeSetterBiConsumers.put(
			"price",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object price) {
					shoppingItem.setPrice((Double)price);
				}

			});
		attributeGetterFunctions.put(
			"discount",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getDiscount();
				}

			});
		attributeSetterBiConsumers.put(
			"discount",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object discount) {
					shoppingItem.setDiscount((Double)discount);
				}

			});
		attributeGetterFunctions.put(
			"taxable",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getTaxable();
				}

			});
		attributeSetterBiConsumers.put(
			"taxable",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object taxable) {
					shoppingItem.setTaxable((Boolean)taxable);
				}

			});
		attributeGetterFunctions.put(
			"shipping",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getShipping();
				}

			});
		attributeSetterBiConsumers.put(
			"shipping",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object shipping) {
					shoppingItem.setShipping((Double)shipping);
				}

			});
		attributeGetterFunctions.put(
			"useShippingFormula",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getUseShippingFormula();
				}

			});
		attributeSetterBiConsumers.put(
			"useShippingFormula",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object useShippingFormula) {

					shoppingItem.setUseShippingFormula(
						(Boolean)useShippingFormula);
				}

			});
		attributeGetterFunctions.put(
			"requiresShipping",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getRequiresShipping();
				}

			});
		attributeSetterBiConsumers.put(
			"requiresShipping",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object requiresShipping) {

					shoppingItem.setRequiresShipping((Boolean)requiresShipping);
				}

			});
		attributeGetterFunctions.put(
			"stockQuantity",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getStockQuantity();
				}

			});
		attributeSetterBiConsumers.put(
			"stockQuantity",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object stockQuantity) {

					shoppingItem.setStockQuantity((Integer)stockQuantity);
				}

			});
		attributeGetterFunctions.put(
			"featured",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getFeatured();
				}

			});
		attributeSetterBiConsumers.put(
			"featured",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object featured) {
					shoppingItem.setFeatured((Boolean)featured);
				}

			});
		attributeGetterFunctions.put(
			"sale",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getSale();
				}

			});
		attributeSetterBiConsumers.put(
			"sale",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(ShoppingItem shoppingItem, Object sale) {
					shoppingItem.setSale((Boolean)sale);
				}

			});
		attributeGetterFunctions.put(
			"smallImage",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getSmallImage();
				}

			});
		attributeSetterBiConsumers.put(
			"smallImage",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object smallImage) {

					shoppingItem.setSmallImage((Boolean)smallImage);
				}

			});
		attributeGetterFunctions.put(
			"smallImageId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getSmallImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"smallImageId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object smallImageId) {

					shoppingItem.setSmallImageId((Long)smallImageId);
				}

			});
		attributeGetterFunctions.put(
			"smallImageURL",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getSmallImageURL();
				}

			});
		attributeSetterBiConsumers.put(
			"smallImageURL",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object smallImageURL) {

					shoppingItem.setSmallImageURL((String)smallImageURL);
				}

			});
		attributeGetterFunctions.put(
			"mediumImage",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getMediumImage();
				}

			});
		attributeSetterBiConsumers.put(
			"mediumImage",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object mediumImage) {

					shoppingItem.setMediumImage((Boolean)mediumImage);
				}

			});
		attributeGetterFunctions.put(
			"mediumImageId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getMediumImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"mediumImageId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object mediumImageId) {

					shoppingItem.setMediumImageId((Long)mediumImageId);
				}

			});
		attributeGetterFunctions.put(
			"mediumImageURL",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getMediumImageURL();
				}

			});
		attributeSetterBiConsumers.put(
			"mediumImageURL",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object mediumImageURL) {

					shoppingItem.setMediumImageURL((String)mediumImageURL);
				}

			});
		attributeGetterFunctions.put(
			"largeImage",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getLargeImage();
				}

			});
		attributeSetterBiConsumers.put(
			"largeImage",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object largeImage) {

					shoppingItem.setLargeImage((Boolean)largeImage);
				}

			});
		attributeGetterFunctions.put(
			"largeImageId",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getLargeImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"largeImageId",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object largeImageId) {

					shoppingItem.setLargeImageId((Long)largeImageId);
				}

			});
		attributeGetterFunctions.put(
			"largeImageURL",
			new Function<ShoppingItem, Object>() {

				@Override
				public Object apply(ShoppingItem shoppingItem) {
					return shoppingItem.getLargeImageURL();
				}

			});
		attributeSetterBiConsumers.put(
			"largeImageURL",
			new BiConsumer<ShoppingItem, Object>() {

				@Override
				public void accept(
					ShoppingItem shoppingItem, Object largeImageURL) {

					shoppingItem.setLargeImageURL((String)largeImageURL);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_columnBitmask = -1L;

		_itemId = itemId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	@Override
	public String getSku() {
		if (_sku == null) {
			return "";
		}
		else {
			return _sku;
		}
	}

	@Override
	public void setSku(String sku) {
		_columnBitmask |= SKU_COLUMN_BITMASK;

		if (_originalSku == null) {
			_originalSku = _sku;
		}

		_sku = sku;
	}

	public String getOriginalSku() {
		return GetterUtil.getString(_originalSku);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getProperties() {
		if (_properties == null) {
			return "";
		}
		else {
			return _properties;
		}
	}

	@Override
	public void setProperties(String properties) {
		_properties = properties;
	}

	@JSON
	@Override
	public boolean getFields() {
		return _fields;
	}

	@JSON
	@Override
	public boolean isFields() {
		return _fields;
	}

	@Override
	public void setFields(boolean fields) {
		_fields = fields;
	}

	@JSON
	@Override
	public String getFieldsQuantities() {
		if (_fieldsQuantities == null) {
			return "";
		}
		else {
			return _fieldsQuantities;
		}
	}

	@Override
	public void setFieldsQuantities(String fieldsQuantities) {
		_fieldsQuantities = fieldsQuantities;
	}

	@JSON
	@Override
	public int getMinQuantity() {
		return _minQuantity;
	}

	@Override
	public void setMinQuantity(int minQuantity) {
		_minQuantity = minQuantity;
	}

	@JSON
	@Override
	public int getMaxQuantity() {
		return _maxQuantity;
	}

	@Override
	public void setMaxQuantity(int maxQuantity) {
		_maxQuantity = maxQuantity;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@JSON
	@Override
	public double getDiscount() {
		return _discount;
	}

	@Override
	public void setDiscount(double discount) {
		_discount = discount;
	}

	@JSON
	@Override
	public boolean getTaxable() {
		return _taxable;
	}

	@JSON
	@Override
	public boolean isTaxable() {
		return _taxable;
	}

	@Override
	public void setTaxable(boolean taxable) {
		_taxable = taxable;
	}

	@JSON
	@Override
	public double getShipping() {
		return _shipping;
	}

	@Override
	public void setShipping(double shipping) {
		_shipping = shipping;
	}

	@JSON
	@Override
	public boolean getUseShippingFormula() {
		return _useShippingFormula;
	}

	@JSON
	@Override
	public boolean isUseShippingFormula() {
		return _useShippingFormula;
	}

	@Override
	public void setUseShippingFormula(boolean useShippingFormula) {
		_useShippingFormula = useShippingFormula;
	}

	@JSON
	@Override
	public boolean getRequiresShipping() {
		return _requiresShipping;
	}

	@JSON
	@Override
	public boolean isRequiresShipping() {
		return _requiresShipping;
	}

	@Override
	public void setRequiresShipping(boolean requiresShipping) {
		_requiresShipping = requiresShipping;
	}

	@JSON
	@Override
	public int getStockQuantity() {
		return _stockQuantity;
	}

	@Override
	public void setStockQuantity(int stockQuantity) {
		_stockQuantity = stockQuantity;
	}

	@JSON
	@Override
	public boolean getFeatured() {
		return _featured;
	}

	@JSON
	@Override
	public boolean isFeatured() {
		return _featured;
	}

	@Override
	public void setFeatured(boolean featured) {
		_featured = featured;
	}

	@JSON
	@Override
	public boolean getSale() {
		return _sale;
	}

	@JSON
	@Override
	public boolean isSale() {
		return _sale;
	}

	@Override
	public void setSale(boolean sale) {
		_sale = sale;
	}

	@JSON
	@Override
	public boolean getSmallImage() {
		return _smallImage;
	}

	@JSON
	@Override
	public boolean isSmallImage() {
		return _smallImage;
	}

	@Override
	public void setSmallImage(boolean smallImage) {
		_smallImage = smallImage;
	}

	@JSON
	@Override
	public long getSmallImageId() {
		return _smallImageId;
	}

	@Override
	public void setSmallImageId(long smallImageId) {
		_columnBitmask |= SMALLIMAGEID_COLUMN_BITMASK;

		if (!_setOriginalSmallImageId) {
			_setOriginalSmallImageId = true;

			_originalSmallImageId = _smallImageId;
		}

		_smallImageId = smallImageId;
	}

	public long getOriginalSmallImageId() {
		return _originalSmallImageId;
	}

	@JSON
	@Override
	public String getSmallImageURL() {
		if (_smallImageURL == null) {
			return "";
		}
		else {
			return _smallImageURL;
		}
	}

	@Override
	public void setSmallImageURL(String smallImageURL) {
		_smallImageURL = smallImageURL;
	}

	@JSON
	@Override
	public boolean getMediumImage() {
		return _mediumImage;
	}

	@JSON
	@Override
	public boolean isMediumImage() {
		return _mediumImage;
	}

	@Override
	public void setMediumImage(boolean mediumImage) {
		_mediumImage = mediumImage;
	}

	@JSON
	@Override
	public long getMediumImageId() {
		return _mediumImageId;
	}

	@Override
	public void setMediumImageId(long mediumImageId) {
		_columnBitmask |= MEDIUMIMAGEID_COLUMN_BITMASK;

		if (!_setOriginalMediumImageId) {
			_setOriginalMediumImageId = true;

			_originalMediumImageId = _mediumImageId;
		}

		_mediumImageId = mediumImageId;
	}

	public long getOriginalMediumImageId() {
		return _originalMediumImageId;
	}

	@JSON
	@Override
	public String getMediumImageURL() {
		if (_mediumImageURL == null) {
			return "";
		}
		else {
			return _mediumImageURL;
		}
	}

	@Override
	public void setMediumImageURL(String mediumImageURL) {
		_mediumImageURL = mediumImageURL;
	}

	@JSON
	@Override
	public boolean getLargeImage() {
		return _largeImage;
	}

	@JSON
	@Override
	public boolean isLargeImage() {
		return _largeImage;
	}

	@Override
	public void setLargeImage(boolean largeImage) {
		_largeImage = largeImage;
	}

	@JSON
	@Override
	public long getLargeImageId() {
		return _largeImageId;
	}

	@Override
	public void setLargeImageId(long largeImageId) {
		_columnBitmask |= LARGEIMAGEID_COLUMN_BITMASK;

		if (!_setOriginalLargeImageId) {
			_setOriginalLargeImageId = true;

			_originalLargeImageId = _largeImageId;
		}

		_largeImageId = largeImageId;
	}

	public long getOriginalLargeImageId() {
		return _originalLargeImageId;
	}

	@JSON
	@Override
	public String getLargeImageURL() {
		if (_largeImageURL == null) {
			return "";
		}
		else {
			return _largeImageURL;
		}
	}

	@Override
	public void setLargeImageURL(String largeImageURL) {
		_largeImageURL = largeImageURL;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ShoppingItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ShoppingItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ShoppingItem)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ShoppingItemImpl shoppingItemImpl = new ShoppingItemImpl();

		shoppingItemImpl.setItemId(getItemId());
		shoppingItemImpl.setGroupId(getGroupId());
		shoppingItemImpl.setCompanyId(getCompanyId());
		shoppingItemImpl.setUserId(getUserId());
		shoppingItemImpl.setUserName(getUserName());
		shoppingItemImpl.setCreateDate(getCreateDate());
		shoppingItemImpl.setModifiedDate(getModifiedDate());
		shoppingItemImpl.setCategoryId(getCategoryId());
		shoppingItemImpl.setSku(getSku());
		shoppingItemImpl.setName(getName());
		shoppingItemImpl.setDescription(getDescription());
		shoppingItemImpl.setProperties(getProperties());
		shoppingItemImpl.setFields(isFields());
		shoppingItemImpl.setFieldsQuantities(getFieldsQuantities());
		shoppingItemImpl.setMinQuantity(getMinQuantity());
		shoppingItemImpl.setMaxQuantity(getMaxQuantity());
		shoppingItemImpl.setPrice(getPrice());
		shoppingItemImpl.setDiscount(getDiscount());
		shoppingItemImpl.setTaxable(isTaxable());
		shoppingItemImpl.setShipping(getShipping());
		shoppingItemImpl.setUseShippingFormula(isUseShippingFormula());
		shoppingItemImpl.setRequiresShipping(isRequiresShipping());
		shoppingItemImpl.setStockQuantity(getStockQuantity());
		shoppingItemImpl.setFeatured(isFeatured());
		shoppingItemImpl.setSale(isSale());
		shoppingItemImpl.setSmallImage(isSmallImage());
		shoppingItemImpl.setSmallImageId(getSmallImageId());
		shoppingItemImpl.setSmallImageURL(getSmallImageURL());
		shoppingItemImpl.setMediumImage(isMediumImage());
		shoppingItemImpl.setMediumImageId(getMediumImageId());
		shoppingItemImpl.setMediumImageURL(getMediumImageURL());
		shoppingItemImpl.setLargeImage(isLargeImage());
		shoppingItemImpl.setLargeImageId(getLargeImageId());
		shoppingItemImpl.setLargeImageURL(getLargeImageURL());

		shoppingItemImpl.resetOriginalValues();

		return shoppingItemImpl;
	}

	@Override
	public int compareTo(ShoppingItem shoppingItem) {
		int value = 0;

		if (getItemId() < shoppingItem.getItemId()) {
			value = -1;
		}
		else if (getItemId() > shoppingItem.getItemId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ShoppingItem)) {
			return false;
		}

		ShoppingItem shoppingItem = (ShoppingItem)obj;

		long primaryKey = shoppingItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ShoppingItemModelImpl shoppingItemModelImpl = this;

		shoppingItemModelImpl._originalGroupId = shoppingItemModelImpl._groupId;

		shoppingItemModelImpl._setOriginalGroupId = false;

		shoppingItemModelImpl._originalCompanyId =
			shoppingItemModelImpl._companyId;

		shoppingItemModelImpl._setOriginalCompanyId = false;

		shoppingItemModelImpl._setModifiedDate = false;

		shoppingItemModelImpl._originalCategoryId =
			shoppingItemModelImpl._categoryId;

		shoppingItemModelImpl._setOriginalCategoryId = false;

		shoppingItemModelImpl._originalSku = shoppingItemModelImpl._sku;

		shoppingItemModelImpl._originalSmallImageId =
			shoppingItemModelImpl._smallImageId;

		shoppingItemModelImpl._setOriginalSmallImageId = false;

		shoppingItemModelImpl._originalMediumImageId =
			shoppingItemModelImpl._mediumImageId;

		shoppingItemModelImpl._setOriginalMediumImageId = false;

		shoppingItemModelImpl._originalLargeImageId =
			shoppingItemModelImpl._largeImageId;

		shoppingItemModelImpl._setOriginalLargeImageId = false;

		shoppingItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ShoppingItem> toCacheModel() {
		ShoppingItemCacheModel shoppingItemCacheModel =
			new ShoppingItemCacheModel();

		shoppingItemCacheModel.itemId = getItemId();

		shoppingItemCacheModel.groupId = getGroupId();

		shoppingItemCacheModel.companyId = getCompanyId();

		shoppingItemCacheModel.userId = getUserId();

		shoppingItemCacheModel.userName = getUserName();

		String userName = shoppingItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			shoppingItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			shoppingItemCacheModel.createDate = createDate.getTime();
		}
		else {
			shoppingItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			shoppingItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			shoppingItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		shoppingItemCacheModel.categoryId = getCategoryId();

		shoppingItemCacheModel.sku = getSku();

		String sku = shoppingItemCacheModel.sku;

		if ((sku != null) && (sku.length() == 0)) {
			shoppingItemCacheModel.sku = null;
		}

		shoppingItemCacheModel.name = getName();

		String name = shoppingItemCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			shoppingItemCacheModel.name = null;
		}

		shoppingItemCacheModel.description = getDescription();

		String description = shoppingItemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			shoppingItemCacheModel.description = null;
		}

		shoppingItemCacheModel.properties = getProperties();

		String properties = shoppingItemCacheModel.properties;

		if ((properties != null) && (properties.length() == 0)) {
			shoppingItemCacheModel.properties = null;
		}

		shoppingItemCacheModel.fields = isFields();

		shoppingItemCacheModel.fieldsQuantities = getFieldsQuantities();

		String fieldsQuantities = shoppingItemCacheModel.fieldsQuantities;

		if ((fieldsQuantities != null) && (fieldsQuantities.length() == 0)) {
			shoppingItemCacheModel.fieldsQuantities = null;
		}

		shoppingItemCacheModel.minQuantity = getMinQuantity();

		shoppingItemCacheModel.maxQuantity = getMaxQuantity();

		shoppingItemCacheModel.price = getPrice();

		shoppingItemCacheModel.discount = getDiscount();

		shoppingItemCacheModel.taxable = isTaxable();

		shoppingItemCacheModel.shipping = getShipping();

		shoppingItemCacheModel.useShippingFormula = isUseShippingFormula();

		shoppingItemCacheModel.requiresShipping = isRequiresShipping();

		shoppingItemCacheModel.stockQuantity = getStockQuantity();

		shoppingItemCacheModel.featured = isFeatured();

		shoppingItemCacheModel.sale = isSale();

		shoppingItemCacheModel.smallImage = isSmallImage();

		shoppingItemCacheModel.smallImageId = getSmallImageId();

		shoppingItemCacheModel.smallImageURL = getSmallImageURL();

		String smallImageURL = shoppingItemCacheModel.smallImageURL;

		if ((smallImageURL != null) && (smallImageURL.length() == 0)) {
			shoppingItemCacheModel.smallImageURL = null;
		}

		shoppingItemCacheModel.mediumImage = isMediumImage();

		shoppingItemCacheModel.mediumImageId = getMediumImageId();

		shoppingItemCacheModel.mediumImageURL = getMediumImageURL();

		String mediumImageURL = shoppingItemCacheModel.mediumImageURL;

		if ((mediumImageURL != null) && (mediumImageURL.length() == 0)) {
			shoppingItemCacheModel.mediumImageURL = null;
		}

		shoppingItemCacheModel.largeImage = isLargeImage();

		shoppingItemCacheModel.largeImageId = getLargeImageId();

		shoppingItemCacheModel.largeImageURL = getLargeImageURL();

		String largeImageURL = shoppingItemCacheModel.largeImageURL;

		if ((largeImageURL != null) && (largeImageURL.length() == 0)) {
			shoppingItemCacheModel.largeImageURL = null;
		}

		return shoppingItemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ShoppingItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ShoppingItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ShoppingItem)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ShoppingItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ShoppingItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ShoppingItem)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		ShoppingItem.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		ShoppingItem.class, ModelWrapper.class
	};

	private long _itemId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private String _sku;
	private String _originalSku;
	private String _name;
	private String _description;
	private String _properties;
	private boolean _fields;
	private String _fieldsQuantities;
	private int _minQuantity;
	private int _maxQuantity;
	private double _price;
	private double _discount;
	private boolean _taxable;
	private double _shipping;
	private boolean _useShippingFormula;
	private boolean _requiresShipping;
	private int _stockQuantity;
	private boolean _featured;
	private boolean _sale;
	private boolean _smallImage;
	private long _smallImageId;
	private long _originalSmallImageId;
	private boolean _setOriginalSmallImageId;
	private String _smallImageURL;
	private boolean _mediumImage;
	private long _mediumImageId;
	private long _originalMediumImageId;
	private boolean _setOriginalMediumImageId;
	private String _mediumImageURL;
	private boolean _largeImage;
	private long _largeImageId;
	private long _originalLargeImageId;
	private boolean _setOriginalLargeImageId;
	private String _largeImageURL;
	private long _columnBitmask;
	private ShoppingItem _escapedModel;

}