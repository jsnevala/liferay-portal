/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.shopping.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.shopping.model.ShoppingOrder;
import com.liferay.shopping.model.ShoppingOrderModel;
import com.liferay.shopping.model.ShoppingOrderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ShoppingOrder service. Represents a row in the &quot;ShoppingOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ShoppingOrderModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingOrderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoppingOrderImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ShoppingOrderModelImpl
	extends BaseModelImpl<ShoppingOrder> implements ShoppingOrderModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shopping order model instance should use the <code>ShoppingOrder</code> interface instead.
	 */
	public static final String TABLE_NAME = "ShoppingOrder";

	public static final Object[][] TABLE_COLUMNS = {
		{"orderId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"number_", Types.VARCHAR},
		{"tax", Types.DOUBLE}, {"shipping", Types.DOUBLE},
		{"altShipping", Types.VARCHAR}, {"requiresShipping", Types.BOOLEAN},
		{"insure", Types.BOOLEAN}, {"insurance", Types.DOUBLE},
		{"couponCodes", Types.VARCHAR}, {"couponDiscount", Types.DOUBLE},
		{"billingFirstName", Types.VARCHAR}, {"billingLastName", Types.VARCHAR},
		{"billingEmailAddress", Types.VARCHAR},
		{"billingCompany", Types.VARCHAR}, {"billingStreet", Types.VARCHAR},
		{"billingCity", Types.VARCHAR}, {"billingState", Types.VARCHAR},
		{"billingZip", Types.VARCHAR}, {"billingCountry", Types.VARCHAR},
		{"billingPhone", Types.VARCHAR}, {"shipToBilling", Types.BOOLEAN},
		{"shippingFirstName", Types.VARCHAR},
		{"shippingLastName", Types.VARCHAR},
		{"shippingEmailAddress", Types.VARCHAR},
		{"shippingCompany", Types.VARCHAR}, {"shippingStreet", Types.VARCHAR},
		{"shippingCity", Types.VARCHAR}, {"shippingState", Types.VARCHAR},
		{"shippingZip", Types.VARCHAR}, {"shippingCountry", Types.VARCHAR},
		{"shippingPhone", Types.VARCHAR}, {"ccName", Types.VARCHAR},
		{"ccType", Types.VARCHAR}, {"ccNumber", Types.VARCHAR},
		{"ccExpMonth", Types.INTEGER}, {"ccExpYear", Types.INTEGER},
		{"ccVerNumber", Types.VARCHAR}, {"comments", Types.CLOB},
		{"ppTxnId", Types.VARCHAR}, {"ppPaymentStatus", Types.VARCHAR},
		{"ppPaymentGross", Types.DOUBLE}, {"ppReceiverEmail", Types.VARCHAR},
		{"ppPayerEmail", Types.VARCHAR}, {"sendOrderEmail", Types.BOOLEAN},
		{"sendShippingEmail", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("orderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("number_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("shipping", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("altShipping", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requiresShipping", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("insure", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("insurance", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("couponCodes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("couponDiscount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("billingFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingEmailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingStreet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingZip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shipToBilling", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("shippingFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingEmailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingStreet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingZip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ccName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ccType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ccNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ccExpMonth", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ccExpYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ccVerNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.CLOB);
		TABLE_COLUMNS_MAP.put("ppTxnId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppPaymentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppPaymentGross", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ppReceiverEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppPayerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sendOrderEmail", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sendShippingEmail", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ShoppingOrder (orderId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,number_ VARCHAR(75) null,tax DOUBLE,shipping DOUBLE,altShipping VARCHAR(75) null,requiresShipping BOOLEAN,insure BOOLEAN,insurance DOUBLE,couponCodes VARCHAR(75) null,couponDiscount DOUBLE,billingFirstName VARCHAR(75) null,billingLastName VARCHAR(75) null,billingEmailAddress VARCHAR(254) null,billingCompany VARCHAR(75) null,billingStreet VARCHAR(75) null,billingCity VARCHAR(75) null,billingState VARCHAR(75) null,billingZip VARCHAR(75) null,billingCountry VARCHAR(75) null,billingPhone VARCHAR(75) null,shipToBilling BOOLEAN,shippingFirstName VARCHAR(75) null,shippingLastName VARCHAR(75) null,shippingEmailAddress VARCHAR(254) null,shippingCompany VARCHAR(75) null,shippingStreet VARCHAR(75) null,shippingCity VARCHAR(75) null,shippingState VARCHAR(75) null,shippingZip VARCHAR(75) null,shippingCountry VARCHAR(75) null,shippingPhone VARCHAR(75) null,ccName VARCHAR(75) null,ccType VARCHAR(75) null,ccNumber VARCHAR(75) null,ccExpMonth INTEGER,ccExpYear INTEGER,ccVerNumber VARCHAR(75) null,comments TEXT null,ppTxnId VARCHAR(75) null,ppPaymentStatus VARCHAR(75) null,ppPaymentGross DOUBLE,ppReceiverEmail VARCHAR(254) null,ppPayerEmail VARCHAR(254) null,sendOrderEmail BOOLEAN,sendShippingEmail BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table ShoppingOrder";

	public static final String ORDER_BY_JPQL =
		" ORDER BY shoppingOrder.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ShoppingOrder.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.shopping.model.ShoppingOrder"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.shopping.model.ShoppingOrder"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.shopping.model.ShoppingOrder"),
		true);

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long NUMBER_COLUMN_BITMASK = 2L;

	public static final long PPPAYMENTSTATUS_COLUMN_BITMASK = 4L;

	public static final long PPTXNID_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ShoppingOrder toModel(ShoppingOrderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ShoppingOrder model = new ShoppingOrderImpl();

		model.setOrderId(soapModel.getOrderId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNumber(soapModel.getNumber());
		model.setTax(soapModel.getTax());
		model.setShipping(soapModel.getShipping());
		model.setAltShipping(soapModel.getAltShipping());
		model.setRequiresShipping(soapModel.isRequiresShipping());
		model.setInsure(soapModel.isInsure());
		model.setInsurance(soapModel.getInsurance());
		model.setCouponCodes(soapModel.getCouponCodes());
		model.setCouponDiscount(soapModel.getCouponDiscount());
		model.setBillingFirstName(soapModel.getBillingFirstName());
		model.setBillingLastName(soapModel.getBillingLastName());
		model.setBillingEmailAddress(soapModel.getBillingEmailAddress());
		model.setBillingCompany(soapModel.getBillingCompany());
		model.setBillingStreet(soapModel.getBillingStreet());
		model.setBillingCity(soapModel.getBillingCity());
		model.setBillingState(soapModel.getBillingState());
		model.setBillingZip(soapModel.getBillingZip());
		model.setBillingCountry(soapModel.getBillingCountry());
		model.setBillingPhone(soapModel.getBillingPhone());
		model.setShipToBilling(soapModel.isShipToBilling());
		model.setShippingFirstName(soapModel.getShippingFirstName());
		model.setShippingLastName(soapModel.getShippingLastName());
		model.setShippingEmailAddress(soapModel.getShippingEmailAddress());
		model.setShippingCompany(soapModel.getShippingCompany());
		model.setShippingStreet(soapModel.getShippingStreet());
		model.setShippingCity(soapModel.getShippingCity());
		model.setShippingState(soapModel.getShippingState());
		model.setShippingZip(soapModel.getShippingZip());
		model.setShippingCountry(soapModel.getShippingCountry());
		model.setShippingPhone(soapModel.getShippingPhone());
		model.setCcName(soapModel.getCcName());
		model.setCcType(soapModel.getCcType());
		model.setCcNumber(soapModel.getCcNumber());
		model.setCcExpMonth(soapModel.getCcExpMonth());
		model.setCcExpYear(soapModel.getCcExpYear());
		model.setCcVerNumber(soapModel.getCcVerNumber());
		model.setComments(soapModel.getComments());
		model.setPpTxnId(soapModel.getPpTxnId());
		model.setPpPaymentStatus(soapModel.getPpPaymentStatus());
		model.setPpPaymentGross(soapModel.getPpPaymentGross());
		model.setPpReceiverEmail(soapModel.getPpReceiverEmail());
		model.setPpPayerEmail(soapModel.getPpPayerEmail());
		model.setSendOrderEmail(soapModel.isSendOrderEmail());
		model.setSendShippingEmail(soapModel.isSendShippingEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ShoppingOrder> toModels(ShoppingOrderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ShoppingOrder> models = new ArrayList<ShoppingOrder>(
			soapModels.length);

		for (ShoppingOrderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.shopping.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.shopping.model.ShoppingOrder"));

	public ShoppingOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _orderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _orderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ShoppingOrder.class;
	}

	@Override
	public String getModelClassName() {
		return ShoppingOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ShoppingOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ShoppingOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingOrder, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ShoppingOrder)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ShoppingOrder, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ShoppingOrder, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ShoppingOrder)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ShoppingOrder, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ShoppingOrder, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ShoppingOrder, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ShoppingOrder, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ShoppingOrder, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ShoppingOrder, Object>>();
		Map<String, BiConsumer<ShoppingOrder, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ShoppingOrder, ?>>();

		attributeGetterFunctions.put(
			"orderId",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getOrderId();
				}

			});
		attributeSetterBiConsumers.put(
			"orderId",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object orderId) {

					shoppingOrder.setOrderId((Long)orderId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object groupId) {

					shoppingOrder.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object companyId) {

					shoppingOrder.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(ShoppingOrder shoppingOrder, Object userId) {
					shoppingOrder.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object userName) {

					shoppingOrder.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object createDate) {

					shoppingOrder.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object modifiedDate) {

					shoppingOrder.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"number",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"number",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(ShoppingOrder shoppingOrder, Object number) {
					shoppingOrder.setNumber((String)number);
				}

			});
		attributeGetterFunctions.put(
			"tax",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getTax();
				}

			});
		attributeSetterBiConsumers.put(
			"tax",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(ShoppingOrder shoppingOrder, Object tax) {
					shoppingOrder.setTax((Double)tax);
				}

			});
		attributeGetterFunctions.put(
			"shipping",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShipping();
				}

			});
		attributeSetterBiConsumers.put(
			"shipping",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shipping) {

					shoppingOrder.setShipping((Double)shipping);
				}

			});
		attributeGetterFunctions.put(
			"altShipping",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getAltShipping();
				}

			});
		attributeSetterBiConsumers.put(
			"altShipping",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object altShipping) {

					shoppingOrder.setAltShipping((String)altShipping);
				}

			});
		attributeGetterFunctions.put(
			"requiresShipping",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getRequiresShipping();
				}

			});
		attributeSetterBiConsumers.put(
			"requiresShipping",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object requiresShipping) {

					shoppingOrder.setRequiresShipping(
						(Boolean)requiresShipping);
				}

			});
		attributeGetterFunctions.put(
			"insure",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getInsure();
				}

			});
		attributeSetterBiConsumers.put(
			"insure",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(ShoppingOrder shoppingOrder, Object insure) {
					shoppingOrder.setInsure((Boolean)insure);
				}

			});
		attributeGetterFunctions.put(
			"insurance",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getInsurance();
				}

			});
		attributeSetterBiConsumers.put(
			"insurance",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object insurance) {

					shoppingOrder.setInsurance((Double)insurance);
				}

			});
		attributeGetterFunctions.put(
			"couponCodes",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCouponCodes();
				}

			});
		attributeSetterBiConsumers.put(
			"couponCodes",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object couponCodes) {

					shoppingOrder.setCouponCodes((String)couponCodes);
				}

			});
		attributeGetterFunctions.put(
			"couponDiscount",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCouponDiscount();
				}

			});
		attributeSetterBiConsumers.put(
			"couponDiscount",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object couponDiscount) {

					shoppingOrder.setCouponDiscount((Double)couponDiscount);
				}

			});
		attributeGetterFunctions.put(
			"billingFirstName",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingFirstName();
				}

			});
		attributeSetterBiConsumers.put(
			"billingFirstName",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingFirstName) {

					shoppingOrder.setBillingFirstName((String)billingFirstName);
				}

			});
		attributeGetterFunctions.put(
			"billingLastName",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingLastName();
				}

			});
		attributeSetterBiConsumers.put(
			"billingLastName",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingLastName) {

					shoppingOrder.setBillingLastName((String)billingLastName);
				}

			});
		attributeGetterFunctions.put(
			"billingEmailAddress",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingEmailAddress();
				}

			});
		attributeSetterBiConsumers.put(
			"billingEmailAddress",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingEmailAddress) {

					shoppingOrder.setBillingEmailAddress(
						(String)billingEmailAddress);
				}

			});
		attributeGetterFunctions.put(
			"billingCompany",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingCompany();
				}

			});
		attributeSetterBiConsumers.put(
			"billingCompany",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingCompany) {

					shoppingOrder.setBillingCompany((String)billingCompany);
				}

			});
		attributeGetterFunctions.put(
			"billingStreet",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingStreet();
				}

			});
		attributeSetterBiConsumers.put(
			"billingStreet",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingStreet) {

					shoppingOrder.setBillingStreet((String)billingStreet);
				}

			});
		attributeGetterFunctions.put(
			"billingCity",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingCity();
				}

			});
		attributeSetterBiConsumers.put(
			"billingCity",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingCity) {

					shoppingOrder.setBillingCity((String)billingCity);
				}

			});
		attributeGetterFunctions.put(
			"billingState",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingState();
				}

			});
		attributeSetterBiConsumers.put(
			"billingState",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingState) {

					shoppingOrder.setBillingState((String)billingState);
				}

			});
		attributeGetterFunctions.put(
			"billingZip",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingZip();
				}

			});
		attributeSetterBiConsumers.put(
			"billingZip",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingZip) {

					shoppingOrder.setBillingZip((String)billingZip);
				}

			});
		attributeGetterFunctions.put(
			"billingCountry",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"billingCountry",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingCountry) {

					shoppingOrder.setBillingCountry((String)billingCountry);
				}

			});
		attributeGetterFunctions.put(
			"billingPhone",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getBillingPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"billingPhone",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object billingPhone) {

					shoppingOrder.setBillingPhone((String)billingPhone);
				}

			});
		attributeGetterFunctions.put(
			"shipToBilling",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShipToBilling();
				}

			});
		attributeSetterBiConsumers.put(
			"shipToBilling",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shipToBilling) {

					shoppingOrder.setShipToBilling((Boolean)shipToBilling);
				}

			});
		attributeGetterFunctions.put(
			"shippingFirstName",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingFirstName();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingFirstName",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingFirstName) {

					shoppingOrder.setShippingFirstName(
						(String)shippingFirstName);
				}

			});
		attributeGetterFunctions.put(
			"shippingLastName",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingLastName();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingLastName",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingLastName) {

					shoppingOrder.setShippingLastName((String)shippingLastName);
				}

			});
		attributeGetterFunctions.put(
			"shippingEmailAddress",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingEmailAddress();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingEmailAddress",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingEmailAddress) {

					shoppingOrder.setShippingEmailAddress(
						(String)shippingEmailAddress);
				}

			});
		attributeGetterFunctions.put(
			"shippingCompany",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingCompany();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingCompany",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingCompany) {

					shoppingOrder.setShippingCompany((String)shippingCompany);
				}

			});
		attributeGetterFunctions.put(
			"shippingStreet",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingStreet();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingStreet",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingStreet) {

					shoppingOrder.setShippingStreet((String)shippingStreet);
				}

			});
		attributeGetterFunctions.put(
			"shippingCity",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingCity();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingCity",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingCity) {

					shoppingOrder.setShippingCity((String)shippingCity);
				}

			});
		attributeGetterFunctions.put(
			"shippingState",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingState();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingState",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingState) {

					shoppingOrder.setShippingState((String)shippingState);
				}

			});
		attributeGetterFunctions.put(
			"shippingZip",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingZip();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingZip",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingZip) {

					shoppingOrder.setShippingZip((String)shippingZip);
				}

			});
		attributeGetterFunctions.put(
			"shippingCountry",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingCountry",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingCountry) {

					shoppingOrder.setShippingCountry((String)shippingCountry);
				}

			});
		attributeGetterFunctions.put(
			"shippingPhone",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getShippingPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"shippingPhone",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object shippingPhone) {

					shoppingOrder.setShippingPhone((String)shippingPhone);
				}

			});
		attributeGetterFunctions.put(
			"ccName",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCcName();
				}

			});
		attributeSetterBiConsumers.put(
			"ccName",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(ShoppingOrder shoppingOrder, Object ccName) {
					shoppingOrder.setCcName((String)ccName);
				}

			});
		attributeGetterFunctions.put(
			"ccType",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCcType();
				}

			});
		attributeSetterBiConsumers.put(
			"ccType",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(ShoppingOrder shoppingOrder, Object ccType) {
					shoppingOrder.setCcType((String)ccType);
				}

			});
		attributeGetterFunctions.put(
			"ccNumber",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCcNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"ccNumber",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ccNumber) {

					shoppingOrder.setCcNumber((String)ccNumber);
				}

			});
		attributeGetterFunctions.put(
			"ccExpMonth",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCcExpMonth();
				}

			});
		attributeSetterBiConsumers.put(
			"ccExpMonth",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ccExpMonth) {

					shoppingOrder.setCcExpMonth((Integer)ccExpMonth);
				}

			});
		attributeGetterFunctions.put(
			"ccExpYear",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCcExpYear();
				}

			});
		attributeSetterBiConsumers.put(
			"ccExpYear",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ccExpYear) {

					shoppingOrder.setCcExpYear((Integer)ccExpYear);
				}

			});
		attributeGetterFunctions.put(
			"ccVerNumber",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getCcVerNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"ccVerNumber",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ccVerNumber) {

					shoppingOrder.setCcVerNumber((String)ccVerNumber);
				}

			});
		attributeGetterFunctions.put(
			"comments",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getComments();
				}

			});
		attributeSetterBiConsumers.put(
			"comments",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object comments) {

					shoppingOrder.setComments((String)comments);
				}

			});
		attributeGetterFunctions.put(
			"ppTxnId",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getPpTxnId();
				}

			});
		attributeSetterBiConsumers.put(
			"ppTxnId",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ppTxnId) {

					shoppingOrder.setPpTxnId((String)ppTxnId);
				}

			});
		attributeGetterFunctions.put(
			"ppPaymentStatus",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getPpPaymentStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"ppPaymentStatus",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ppPaymentStatus) {

					shoppingOrder.setPpPaymentStatus((String)ppPaymentStatus);
				}

			});
		attributeGetterFunctions.put(
			"ppPaymentGross",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getPpPaymentGross();
				}

			});
		attributeSetterBiConsumers.put(
			"ppPaymentGross",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ppPaymentGross) {

					shoppingOrder.setPpPaymentGross((Double)ppPaymentGross);
				}

			});
		attributeGetterFunctions.put(
			"ppReceiverEmail",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getPpReceiverEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"ppReceiverEmail",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ppReceiverEmail) {

					shoppingOrder.setPpReceiverEmail((String)ppReceiverEmail);
				}

			});
		attributeGetterFunctions.put(
			"ppPayerEmail",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getPpPayerEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"ppPayerEmail",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object ppPayerEmail) {

					shoppingOrder.setPpPayerEmail((String)ppPayerEmail);
				}

			});
		attributeGetterFunctions.put(
			"sendOrderEmail",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getSendOrderEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"sendOrderEmail",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object sendOrderEmail) {

					shoppingOrder.setSendOrderEmail((Boolean)sendOrderEmail);
				}

			});
		attributeGetterFunctions.put(
			"sendShippingEmail",
			new Function<ShoppingOrder, Object>() {

				@Override
				public Object apply(ShoppingOrder shoppingOrder) {
					return shoppingOrder.getSendShippingEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"sendShippingEmail",
			new BiConsumer<ShoppingOrder, Object>() {

				@Override
				public void accept(
					ShoppingOrder shoppingOrder, Object sendShippingEmail) {

					shoppingOrder.setSendShippingEmail(
						(Boolean)sendShippingEmail);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getOrderId() {
		return _orderId;
	}

	@Override
	public void setOrderId(long orderId) {
		_orderId = orderId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNumber() {
		if (_number == null) {
			return "";
		}
		else {
			return _number;
		}
	}

	@Override
	public void setNumber(String number) {
		_columnBitmask |= NUMBER_COLUMN_BITMASK;

		if (_originalNumber == null) {
			_originalNumber = _number;
		}

		_number = number;
	}

	public String getOriginalNumber() {
		return GetterUtil.getString(_originalNumber);
	}

	@JSON
	@Override
	public double getTax() {
		return _tax;
	}

	@Override
	public void setTax(double tax) {
		_tax = tax;
	}

	@JSON
	@Override
	public double getShipping() {
		return _shipping;
	}

	@Override
	public void setShipping(double shipping) {
		_shipping = shipping;
	}

	@JSON
	@Override
	public String getAltShipping() {
		if (_altShipping == null) {
			return "";
		}
		else {
			return _altShipping;
		}
	}

	@Override
	public void setAltShipping(String altShipping) {
		_altShipping = altShipping;
	}

	@JSON
	@Override
	public boolean getRequiresShipping() {
		return _requiresShipping;
	}

	@JSON
	@Override
	public boolean isRequiresShipping() {
		return _requiresShipping;
	}

	@Override
	public void setRequiresShipping(boolean requiresShipping) {
		_requiresShipping = requiresShipping;
	}

	@JSON
	@Override
	public boolean getInsure() {
		return _insure;
	}

	@JSON
	@Override
	public boolean isInsure() {
		return _insure;
	}

	@Override
	public void setInsure(boolean insure) {
		_insure = insure;
	}

	@JSON
	@Override
	public double getInsurance() {
		return _insurance;
	}

	@Override
	public void setInsurance(double insurance) {
		_insurance = insurance;
	}

	@JSON
	@Override
	public String getCouponCodes() {
		if (_couponCodes == null) {
			return "";
		}
		else {
			return _couponCodes;
		}
	}

	@Override
	public void setCouponCodes(String couponCodes) {
		_couponCodes = couponCodes;
	}

	@JSON
	@Override
	public double getCouponDiscount() {
		return _couponDiscount;
	}

	@Override
	public void setCouponDiscount(double couponDiscount) {
		_couponDiscount = couponDiscount;
	}

	@JSON
	@Override
	public String getBillingFirstName() {
		if (_billingFirstName == null) {
			return "";
		}
		else {
			return _billingFirstName;
		}
	}

	@Override
	public void setBillingFirstName(String billingFirstName) {
		_billingFirstName = billingFirstName;
	}

	@JSON
	@Override
	public String getBillingLastName() {
		if (_billingLastName == null) {
			return "";
		}
		else {
			return _billingLastName;
		}
	}

	@Override
	public void setBillingLastName(String billingLastName) {
		_billingLastName = billingLastName;
	}

	@JSON
	@Override
	public String getBillingEmailAddress() {
		if (_billingEmailAddress == null) {
			return "";
		}
		else {
			return _billingEmailAddress;
		}
	}

	@Override
	public void setBillingEmailAddress(String billingEmailAddress) {
		_billingEmailAddress = billingEmailAddress;
	}

	@JSON
	@Override
	public String getBillingCompany() {
		if (_billingCompany == null) {
			return "";
		}
		else {
			return _billingCompany;
		}
	}

	@Override
	public void setBillingCompany(String billingCompany) {
		_billingCompany = billingCompany;
	}

	@JSON
	@Override
	public String getBillingStreet() {
		if (_billingStreet == null) {
			return "";
		}
		else {
			return _billingStreet;
		}
	}

	@Override
	public void setBillingStreet(String billingStreet) {
		_billingStreet = billingStreet;
	}

	@JSON
	@Override
	public String getBillingCity() {
		if (_billingCity == null) {
			return "";
		}
		else {
			return _billingCity;
		}
	}

	@Override
	public void setBillingCity(String billingCity) {
		_billingCity = billingCity;
	}

	@JSON
	@Override
	public String getBillingState() {
		if (_billingState == null) {
			return "";
		}
		else {
			return _billingState;
		}
	}

	@Override
	public void setBillingState(String billingState) {
		_billingState = billingState;
	}

	@JSON
	@Override
	public String getBillingZip() {
		if (_billingZip == null) {
			return "";
		}
		else {
			return _billingZip;
		}
	}

	@Override
	public void setBillingZip(String billingZip) {
		_billingZip = billingZip;
	}

	@JSON
	@Override
	public String getBillingCountry() {
		if (_billingCountry == null) {
			return "";
		}
		else {
			return _billingCountry;
		}
	}

	@Override
	public void setBillingCountry(String billingCountry) {
		_billingCountry = billingCountry;
	}

	@JSON
	@Override
	public String getBillingPhone() {
		if (_billingPhone == null) {
			return "";
		}
		else {
			return _billingPhone;
		}
	}

	@Override
	public void setBillingPhone(String billingPhone) {
		_billingPhone = billingPhone;
	}

	@JSON
	@Override
	public boolean getShipToBilling() {
		return _shipToBilling;
	}

	@JSON
	@Override
	public boolean isShipToBilling() {
		return _shipToBilling;
	}

	@Override
	public void setShipToBilling(boolean shipToBilling) {
		_shipToBilling = shipToBilling;
	}

	@JSON
	@Override
	public String getShippingFirstName() {
		if (_shippingFirstName == null) {
			return "";
		}
		else {
			return _shippingFirstName;
		}
	}

	@Override
	public void setShippingFirstName(String shippingFirstName) {
		_shippingFirstName = shippingFirstName;
	}

	@JSON
	@Override
	public String getShippingLastName() {
		if (_shippingLastName == null) {
			return "";
		}
		else {
			return _shippingLastName;
		}
	}

	@Override
	public void setShippingLastName(String shippingLastName) {
		_shippingLastName = shippingLastName;
	}

	@JSON
	@Override
	public String getShippingEmailAddress() {
		if (_shippingEmailAddress == null) {
			return "";
		}
		else {
			return _shippingEmailAddress;
		}
	}

	@Override
	public void setShippingEmailAddress(String shippingEmailAddress) {
		_shippingEmailAddress = shippingEmailAddress;
	}

	@JSON
	@Override
	public String getShippingCompany() {
		if (_shippingCompany == null) {
			return "";
		}
		else {
			return _shippingCompany;
		}
	}

	@Override
	public void setShippingCompany(String shippingCompany) {
		_shippingCompany = shippingCompany;
	}

	@JSON
	@Override
	public String getShippingStreet() {
		if (_shippingStreet == null) {
			return "";
		}
		else {
			return _shippingStreet;
		}
	}

	@Override
	public void setShippingStreet(String shippingStreet) {
		_shippingStreet = shippingStreet;
	}

	@JSON
	@Override
	public String getShippingCity() {
		if (_shippingCity == null) {
			return "";
		}
		else {
			return _shippingCity;
		}
	}

	@Override
	public void setShippingCity(String shippingCity) {
		_shippingCity = shippingCity;
	}

	@JSON
	@Override
	public String getShippingState() {
		if (_shippingState == null) {
			return "";
		}
		else {
			return _shippingState;
		}
	}

	@Override
	public void setShippingState(String shippingState) {
		_shippingState = shippingState;
	}

	@JSON
	@Override
	public String getShippingZip() {
		if (_shippingZip == null) {
			return "";
		}
		else {
			return _shippingZip;
		}
	}

	@Override
	public void setShippingZip(String shippingZip) {
		_shippingZip = shippingZip;
	}

	@JSON
	@Override
	public String getShippingCountry() {
		if (_shippingCountry == null) {
			return "";
		}
		else {
			return _shippingCountry;
		}
	}

	@Override
	public void setShippingCountry(String shippingCountry) {
		_shippingCountry = shippingCountry;
	}

	@JSON
	@Override
	public String getShippingPhone() {
		if (_shippingPhone == null) {
			return "";
		}
		else {
			return _shippingPhone;
		}
	}

	@Override
	public void setShippingPhone(String shippingPhone) {
		_shippingPhone = shippingPhone;
	}

	@JSON
	@Override
	public String getCcName() {
		if (_ccName == null) {
			return "";
		}
		else {
			return _ccName;
		}
	}

	@Override
	public void setCcName(String ccName) {
		_ccName = ccName;
	}

	@JSON
	@Override
	public String getCcType() {
		if (_ccType == null) {
			return "";
		}
		else {
			return _ccType;
		}
	}

	@Override
	public void setCcType(String ccType) {
		_ccType = ccType;
	}

	@JSON
	@Override
	public String getCcNumber() {
		if (_ccNumber == null) {
			return "";
		}
		else {
			return _ccNumber;
		}
	}

	@Override
	public void setCcNumber(String ccNumber) {
		_ccNumber = ccNumber;
	}

	@JSON
	@Override
	public int getCcExpMonth() {
		return _ccExpMonth;
	}

	@Override
	public void setCcExpMonth(int ccExpMonth) {
		_ccExpMonth = ccExpMonth;
	}

	@JSON
	@Override
	public int getCcExpYear() {
		return _ccExpYear;
	}

	@Override
	public void setCcExpYear(int ccExpYear) {
		_ccExpYear = ccExpYear;
	}

	@JSON
	@Override
	public String getCcVerNumber() {
		if (_ccVerNumber == null) {
			return "";
		}
		else {
			return _ccVerNumber;
		}
	}

	@Override
	public void setCcVerNumber(String ccVerNumber) {
		_ccVerNumber = ccVerNumber;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public String getPpTxnId() {
		if (_ppTxnId == null) {
			return "";
		}
		else {
			return _ppTxnId;
		}
	}

	@Override
	public void setPpTxnId(String ppTxnId) {
		_columnBitmask |= PPTXNID_COLUMN_BITMASK;

		if (_originalPpTxnId == null) {
			_originalPpTxnId = _ppTxnId;
		}

		_ppTxnId = ppTxnId;
	}

	public String getOriginalPpTxnId() {
		return GetterUtil.getString(_originalPpTxnId);
	}

	@JSON
	@Override
	public String getPpPaymentStatus() {
		if (_ppPaymentStatus == null) {
			return "";
		}
		else {
			return _ppPaymentStatus;
		}
	}

	@Override
	public void setPpPaymentStatus(String ppPaymentStatus) {
		_columnBitmask |= PPPAYMENTSTATUS_COLUMN_BITMASK;

		if (_originalPpPaymentStatus == null) {
			_originalPpPaymentStatus = _ppPaymentStatus;
		}

		_ppPaymentStatus = ppPaymentStatus;
	}

	public String getOriginalPpPaymentStatus() {
		return GetterUtil.getString(_originalPpPaymentStatus);
	}

	@JSON
	@Override
	public double getPpPaymentGross() {
		return _ppPaymentGross;
	}

	@Override
	public void setPpPaymentGross(double ppPaymentGross) {
		_ppPaymentGross = ppPaymentGross;
	}

	@JSON
	@Override
	public String getPpReceiverEmail() {
		if (_ppReceiverEmail == null) {
			return "";
		}
		else {
			return _ppReceiverEmail;
		}
	}

	@Override
	public void setPpReceiverEmail(String ppReceiverEmail) {
		_ppReceiverEmail = ppReceiverEmail;
	}

	@JSON
	@Override
	public String getPpPayerEmail() {
		if (_ppPayerEmail == null) {
			return "";
		}
		else {
			return _ppPayerEmail;
		}
	}

	@Override
	public void setPpPayerEmail(String ppPayerEmail) {
		_ppPayerEmail = ppPayerEmail;
	}

	@JSON
	@Override
	public boolean getSendOrderEmail() {
		return _sendOrderEmail;
	}

	@JSON
	@Override
	public boolean isSendOrderEmail() {
		return _sendOrderEmail;
	}

	@Override
	public void setSendOrderEmail(boolean sendOrderEmail) {
		_sendOrderEmail = sendOrderEmail;
	}

	@JSON
	@Override
	public boolean getSendShippingEmail() {
		return _sendShippingEmail;
	}

	@JSON
	@Override
	public boolean isSendShippingEmail() {
		return _sendShippingEmail;
	}

	@Override
	public void setSendShippingEmail(boolean sendShippingEmail) {
		_sendShippingEmail = sendShippingEmail;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ShoppingOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ShoppingOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ShoppingOrder)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ShoppingOrderImpl shoppingOrderImpl = new ShoppingOrderImpl();

		shoppingOrderImpl.setOrderId(getOrderId());
		shoppingOrderImpl.setGroupId(getGroupId());
		shoppingOrderImpl.setCompanyId(getCompanyId());
		shoppingOrderImpl.setUserId(getUserId());
		shoppingOrderImpl.setUserName(getUserName());
		shoppingOrderImpl.setCreateDate(getCreateDate());
		shoppingOrderImpl.setModifiedDate(getModifiedDate());
		shoppingOrderImpl.setNumber(getNumber());
		shoppingOrderImpl.setTax(getTax());
		shoppingOrderImpl.setShipping(getShipping());
		shoppingOrderImpl.setAltShipping(getAltShipping());
		shoppingOrderImpl.setRequiresShipping(isRequiresShipping());
		shoppingOrderImpl.setInsure(isInsure());
		shoppingOrderImpl.setInsurance(getInsurance());
		shoppingOrderImpl.setCouponCodes(getCouponCodes());
		shoppingOrderImpl.setCouponDiscount(getCouponDiscount());
		shoppingOrderImpl.setBillingFirstName(getBillingFirstName());
		shoppingOrderImpl.setBillingLastName(getBillingLastName());
		shoppingOrderImpl.setBillingEmailAddress(getBillingEmailAddress());
		shoppingOrderImpl.setBillingCompany(getBillingCompany());
		shoppingOrderImpl.setBillingStreet(getBillingStreet());
		shoppingOrderImpl.setBillingCity(getBillingCity());
		shoppingOrderImpl.setBillingState(getBillingState());
		shoppingOrderImpl.setBillingZip(getBillingZip());
		shoppingOrderImpl.setBillingCountry(getBillingCountry());
		shoppingOrderImpl.setBillingPhone(getBillingPhone());
		shoppingOrderImpl.setShipToBilling(isShipToBilling());
		shoppingOrderImpl.setShippingFirstName(getShippingFirstName());
		shoppingOrderImpl.setShippingLastName(getShippingLastName());
		shoppingOrderImpl.setShippingEmailAddress(getShippingEmailAddress());
		shoppingOrderImpl.setShippingCompany(getShippingCompany());
		shoppingOrderImpl.setShippingStreet(getShippingStreet());
		shoppingOrderImpl.setShippingCity(getShippingCity());
		shoppingOrderImpl.setShippingState(getShippingState());
		shoppingOrderImpl.setShippingZip(getShippingZip());
		shoppingOrderImpl.setShippingCountry(getShippingCountry());
		shoppingOrderImpl.setShippingPhone(getShippingPhone());
		shoppingOrderImpl.setCcName(getCcName());
		shoppingOrderImpl.setCcType(getCcType());
		shoppingOrderImpl.setCcNumber(getCcNumber());
		shoppingOrderImpl.setCcExpMonth(getCcExpMonth());
		shoppingOrderImpl.setCcExpYear(getCcExpYear());
		shoppingOrderImpl.setCcVerNumber(getCcVerNumber());
		shoppingOrderImpl.setComments(getComments());
		shoppingOrderImpl.setPpTxnId(getPpTxnId());
		shoppingOrderImpl.setPpPaymentStatus(getPpPaymentStatus());
		shoppingOrderImpl.setPpPaymentGross(getPpPaymentGross());
		shoppingOrderImpl.setPpReceiverEmail(getPpReceiverEmail());
		shoppingOrderImpl.setPpPayerEmail(getPpPayerEmail());
		shoppingOrderImpl.setSendOrderEmail(isSendOrderEmail());
		shoppingOrderImpl.setSendShippingEmail(isSendShippingEmail());

		shoppingOrderImpl.resetOriginalValues();

		return shoppingOrderImpl;
	}

	@Override
	public int compareTo(ShoppingOrder shoppingOrder) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), shoppingOrder.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ShoppingOrder)) {
			return false;
		}

		ShoppingOrder shoppingOrder = (ShoppingOrder)obj;

		long primaryKey = shoppingOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ShoppingOrderModelImpl shoppingOrderModelImpl = this;

		shoppingOrderModelImpl._originalGroupId =
			shoppingOrderModelImpl._groupId;

		shoppingOrderModelImpl._setOriginalGroupId = false;

		shoppingOrderModelImpl._originalUserId = shoppingOrderModelImpl._userId;

		shoppingOrderModelImpl._setOriginalUserId = false;

		shoppingOrderModelImpl._setModifiedDate = false;

		shoppingOrderModelImpl._originalNumber = shoppingOrderModelImpl._number;

		shoppingOrderModelImpl._originalPpTxnId =
			shoppingOrderModelImpl._ppTxnId;

		shoppingOrderModelImpl._originalPpPaymentStatus =
			shoppingOrderModelImpl._ppPaymentStatus;

		shoppingOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ShoppingOrder> toCacheModel() {
		ShoppingOrderCacheModel shoppingOrderCacheModel =
			new ShoppingOrderCacheModel();

		shoppingOrderCacheModel.orderId = getOrderId();

		shoppingOrderCacheModel.groupId = getGroupId();

		shoppingOrderCacheModel.companyId = getCompanyId();

		shoppingOrderCacheModel.userId = getUserId();

		shoppingOrderCacheModel.userName = getUserName();

		String userName = shoppingOrderCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			shoppingOrderCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			shoppingOrderCacheModel.createDate = createDate.getTime();
		}
		else {
			shoppingOrderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			shoppingOrderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			shoppingOrderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		shoppingOrderCacheModel.number = getNumber();

		String number = shoppingOrderCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			shoppingOrderCacheModel.number = null;
		}

		shoppingOrderCacheModel.tax = getTax();

		shoppingOrderCacheModel.shipping = getShipping();

		shoppingOrderCacheModel.altShipping = getAltShipping();

		String altShipping = shoppingOrderCacheModel.altShipping;

		if ((altShipping != null) && (altShipping.length() == 0)) {
			shoppingOrderCacheModel.altShipping = null;
		}

		shoppingOrderCacheModel.requiresShipping = isRequiresShipping();

		shoppingOrderCacheModel.insure = isInsure();

		shoppingOrderCacheModel.insurance = getInsurance();

		shoppingOrderCacheModel.couponCodes = getCouponCodes();

		String couponCodes = shoppingOrderCacheModel.couponCodes;

		if ((couponCodes != null) && (couponCodes.length() == 0)) {
			shoppingOrderCacheModel.couponCodes = null;
		}

		shoppingOrderCacheModel.couponDiscount = getCouponDiscount();

		shoppingOrderCacheModel.billingFirstName = getBillingFirstName();

		String billingFirstName = shoppingOrderCacheModel.billingFirstName;

		if ((billingFirstName != null) && (billingFirstName.length() == 0)) {
			shoppingOrderCacheModel.billingFirstName = null;
		}

		shoppingOrderCacheModel.billingLastName = getBillingLastName();

		String billingLastName = shoppingOrderCacheModel.billingLastName;

		if ((billingLastName != null) && (billingLastName.length() == 0)) {
			shoppingOrderCacheModel.billingLastName = null;
		}

		shoppingOrderCacheModel.billingEmailAddress = getBillingEmailAddress();

		String billingEmailAddress =
			shoppingOrderCacheModel.billingEmailAddress;

		if ((billingEmailAddress != null) &&
			(billingEmailAddress.length() == 0)) {

			shoppingOrderCacheModel.billingEmailAddress = null;
		}

		shoppingOrderCacheModel.billingCompany = getBillingCompany();

		String billingCompany = shoppingOrderCacheModel.billingCompany;

		if ((billingCompany != null) && (billingCompany.length() == 0)) {
			shoppingOrderCacheModel.billingCompany = null;
		}

		shoppingOrderCacheModel.billingStreet = getBillingStreet();

		String billingStreet = shoppingOrderCacheModel.billingStreet;

		if ((billingStreet != null) && (billingStreet.length() == 0)) {
			shoppingOrderCacheModel.billingStreet = null;
		}

		shoppingOrderCacheModel.billingCity = getBillingCity();

		String billingCity = shoppingOrderCacheModel.billingCity;

		if ((billingCity != null) && (billingCity.length() == 0)) {
			shoppingOrderCacheModel.billingCity = null;
		}

		shoppingOrderCacheModel.billingState = getBillingState();

		String billingState = shoppingOrderCacheModel.billingState;

		if ((billingState != null) && (billingState.length() == 0)) {
			shoppingOrderCacheModel.billingState = null;
		}

		shoppingOrderCacheModel.billingZip = getBillingZip();

		String billingZip = shoppingOrderCacheModel.billingZip;

		if ((billingZip != null) && (billingZip.length() == 0)) {
			shoppingOrderCacheModel.billingZip = null;
		}

		shoppingOrderCacheModel.billingCountry = getBillingCountry();

		String billingCountry = shoppingOrderCacheModel.billingCountry;

		if ((billingCountry != null) && (billingCountry.length() == 0)) {
			shoppingOrderCacheModel.billingCountry = null;
		}

		shoppingOrderCacheModel.billingPhone = getBillingPhone();

		String billingPhone = shoppingOrderCacheModel.billingPhone;

		if ((billingPhone != null) && (billingPhone.length() == 0)) {
			shoppingOrderCacheModel.billingPhone = null;
		}

		shoppingOrderCacheModel.shipToBilling = isShipToBilling();

		shoppingOrderCacheModel.shippingFirstName = getShippingFirstName();

		String shippingFirstName = shoppingOrderCacheModel.shippingFirstName;

		if ((shippingFirstName != null) && (shippingFirstName.length() == 0)) {
			shoppingOrderCacheModel.shippingFirstName = null;
		}

		shoppingOrderCacheModel.shippingLastName = getShippingLastName();

		String shippingLastName = shoppingOrderCacheModel.shippingLastName;

		if ((shippingLastName != null) && (shippingLastName.length() == 0)) {
			shoppingOrderCacheModel.shippingLastName = null;
		}

		shoppingOrderCacheModel.shippingEmailAddress =
			getShippingEmailAddress();

		String shippingEmailAddress =
			shoppingOrderCacheModel.shippingEmailAddress;

		if ((shippingEmailAddress != null) &&
			(shippingEmailAddress.length() == 0)) {

			shoppingOrderCacheModel.shippingEmailAddress = null;
		}

		shoppingOrderCacheModel.shippingCompany = getShippingCompany();

		String shippingCompany = shoppingOrderCacheModel.shippingCompany;

		if ((shippingCompany != null) && (shippingCompany.length() == 0)) {
			shoppingOrderCacheModel.shippingCompany = null;
		}

		shoppingOrderCacheModel.shippingStreet = getShippingStreet();

		String shippingStreet = shoppingOrderCacheModel.shippingStreet;

		if ((shippingStreet != null) && (shippingStreet.length() == 0)) {
			shoppingOrderCacheModel.shippingStreet = null;
		}

		shoppingOrderCacheModel.shippingCity = getShippingCity();

		String shippingCity = shoppingOrderCacheModel.shippingCity;

		if ((shippingCity != null) && (shippingCity.length() == 0)) {
			shoppingOrderCacheModel.shippingCity = null;
		}

		shoppingOrderCacheModel.shippingState = getShippingState();

		String shippingState = shoppingOrderCacheModel.shippingState;

		if ((shippingState != null) && (shippingState.length() == 0)) {
			shoppingOrderCacheModel.shippingState = null;
		}

		shoppingOrderCacheModel.shippingZip = getShippingZip();

		String shippingZip = shoppingOrderCacheModel.shippingZip;

		if ((shippingZip != null) && (shippingZip.length() == 0)) {
			shoppingOrderCacheModel.shippingZip = null;
		}

		shoppingOrderCacheModel.shippingCountry = getShippingCountry();

		String shippingCountry = shoppingOrderCacheModel.shippingCountry;

		if ((shippingCountry != null) && (shippingCountry.length() == 0)) {
			shoppingOrderCacheModel.shippingCountry = null;
		}

		shoppingOrderCacheModel.shippingPhone = getShippingPhone();

		String shippingPhone = shoppingOrderCacheModel.shippingPhone;

		if ((shippingPhone != null) && (shippingPhone.length() == 0)) {
			shoppingOrderCacheModel.shippingPhone = null;
		}

		shoppingOrderCacheModel.ccName = getCcName();

		String ccName = shoppingOrderCacheModel.ccName;

		if ((ccName != null) && (ccName.length() == 0)) {
			shoppingOrderCacheModel.ccName = null;
		}

		shoppingOrderCacheModel.ccType = getCcType();

		String ccType = shoppingOrderCacheModel.ccType;

		if ((ccType != null) && (ccType.length() == 0)) {
			shoppingOrderCacheModel.ccType = null;
		}

		shoppingOrderCacheModel.ccNumber = getCcNumber();

		String ccNumber = shoppingOrderCacheModel.ccNumber;

		if ((ccNumber != null) && (ccNumber.length() == 0)) {
			shoppingOrderCacheModel.ccNumber = null;
		}

		shoppingOrderCacheModel.ccExpMonth = getCcExpMonth();

		shoppingOrderCacheModel.ccExpYear = getCcExpYear();

		shoppingOrderCacheModel.ccVerNumber = getCcVerNumber();

		String ccVerNumber = shoppingOrderCacheModel.ccVerNumber;

		if ((ccVerNumber != null) && (ccVerNumber.length() == 0)) {
			shoppingOrderCacheModel.ccVerNumber = null;
		}

		shoppingOrderCacheModel.comments = getComments();

		String comments = shoppingOrderCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			shoppingOrderCacheModel.comments = null;
		}

		shoppingOrderCacheModel.ppTxnId = getPpTxnId();

		String ppTxnId = shoppingOrderCacheModel.ppTxnId;

		if ((ppTxnId != null) && (ppTxnId.length() == 0)) {
			shoppingOrderCacheModel.ppTxnId = null;
		}

		shoppingOrderCacheModel.ppPaymentStatus = getPpPaymentStatus();

		String ppPaymentStatus = shoppingOrderCacheModel.ppPaymentStatus;

		if ((ppPaymentStatus != null) && (ppPaymentStatus.length() == 0)) {
			shoppingOrderCacheModel.ppPaymentStatus = null;
		}

		shoppingOrderCacheModel.ppPaymentGross = getPpPaymentGross();

		shoppingOrderCacheModel.ppReceiverEmail = getPpReceiverEmail();

		String ppReceiverEmail = shoppingOrderCacheModel.ppReceiverEmail;

		if ((ppReceiverEmail != null) && (ppReceiverEmail.length() == 0)) {
			shoppingOrderCacheModel.ppReceiverEmail = null;
		}

		shoppingOrderCacheModel.ppPayerEmail = getPpPayerEmail();

		String ppPayerEmail = shoppingOrderCacheModel.ppPayerEmail;

		if ((ppPayerEmail != null) && (ppPayerEmail.length() == 0)) {
			shoppingOrderCacheModel.ppPayerEmail = null;
		}

		shoppingOrderCacheModel.sendOrderEmail = isSendOrderEmail();

		shoppingOrderCacheModel.sendShippingEmail = isSendShippingEmail();

		return shoppingOrderCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ShoppingOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ShoppingOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingOrder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ShoppingOrder)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ShoppingOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ShoppingOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingOrder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ShoppingOrder)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		ShoppingOrder.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		ShoppingOrder.class, ModelWrapper.class
	};

	private long _orderId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _number;
	private String _originalNumber;
	private double _tax;
	private double _shipping;
	private String _altShipping;
	private boolean _requiresShipping;
	private boolean _insure;
	private double _insurance;
	private String _couponCodes;
	private double _couponDiscount;
	private String _billingFirstName;
	private String _billingLastName;
	private String _billingEmailAddress;
	private String _billingCompany;
	private String _billingStreet;
	private String _billingCity;
	private String _billingState;
	private String _billingZip;
	private String _billingCountry;
	private String _billingPhone;
	private boolean _shipToBilling;
	private String _shippingFirstName;
	private String _shippingLastName;
	private String _shippingEmailAddress;
	private String _shippingCompany;
	private String _shippingStreet;
	private String _shippingCity;
	private String _shippingState;
	private String _shippingZip;
	private String _shippingCountry;
	private String _shippingPhone;
	private String _ccName;
	private String _ccType;
	private String _ccNumber;
	private int _ccExpMonth;
	private int _ccExpYear;
	private String _ccVerNumber;
	private String _comments;
	private String _ppTxnId;
	private String _originalPpTxnId;
	private String _ppPaymentStatus;
	private String _originalPpPaymentStatus;
	private double _ppPaymentGross;
	private String _ppReceiverEmail;
	private String _ppPayerEmail;
	private boolean _sendOrderEmail;
	private boolean _sendShippingEmail;
	private long _columnBitmask;
	private ShoppingOrder _escapedModel;

}