/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.shopping.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.shopping.model.ShoppingItemPrice;
import com.liferay.shopping.model.ShoppingItemPriceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ShoppingItemPrice service. Represents a row in the &quot;ShoppingItemPrice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ShoppingItemPriceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingItemPriceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoppingItemPriceImpl
 * @generated
 */
@ProviderType
public class ShoppingItemPriceModelImpl
	extends BaseModelImpl<ShoppingItemPrice> implements ShoppingItemPriceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shopping item price model instance should use the <code>ShoppingItemPrice</code> interface instead.
	 */
	public static final String TABLE_NAME = "ShoppingItemPrice";

	public static final Object[][] TABLE_COLUMNS = {
		{"itemPriceId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"itemId", Types.BIGINT}, {"minQuantity", Types.INTEGER},
		{"maxQuantity", Types.INTEGER}, {"price", Types.DOUBLE},
		{"discount", Types.DOUBLE}, {"taxable", Types.BOOLEAN},
		{"shipping", Types.DOUBLE}, {"useShippingFormula", Types.BOOLEAN},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("itemPriceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("itemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("minQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("discount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("taxable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("shipping", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("useShippingFormula", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ShoppingItemPrice (itemPriceId LONG not null primary key,companyId LONG,itemId LONG,minQuantity INTEGER,maxQuantity INTEGER,price DOUBLE,discount DOUBLE,taxable BOOLEAN,shipping DOUBLE,useShippingFormula BOOLEAN,status INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table ShoppingItemPrice";

	public static final String ORDER_BY_JPQL =
		" ORDER BY shoppingItemPrice.itemId ASC, shoppingItemPrice.itemPriceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ShoppingItemPrice.itemId ASC, ShoppingItemPrice.itemPriceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.shopping.model.ShoppingItemPrice"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.shopping.model.ShoppingItemPrice"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.shopping.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.shopping.model.ShoppingItemPrice"),
		true);

	public static final long ITEMID_COLUMN_BITMASK = 1L;

	public static final long ITEMPRICEID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.shopping.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.shopping.model.ShoppingItemPrice"));

	public ShoppingItemPriceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemPriceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemPriceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemPriceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ShoppingItemPrice.class;
	}

	@Override
	public String getModelClassName() {
		return ShoppingItemPrice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ShoppingItemPrice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ShoppingItemPrice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingItemPrice, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ShoppingItemPrice)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ShoppingItemPrice, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ShoppingItemPrice, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ShoppingItemPrice)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ShoppingItemPrice, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ShoppingItemPrice, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ShoppingItemPrice, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ShoppingItemPrice, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ShoppingItemPrice, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ShoppingItemPrice, Object>>();
		Map<String, BiConsumer<ShoppingItemPrice, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ShoppingItemPrice, ?>>();

		attributeGetterFunctions.put(
			"itemPriceId",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getItemPriceId();
				}

			});
		attributeSetterBiConsumers.put(
			"itemPriceId",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object itemPriceId) {

					shoppingItemPrice.setItemPriceId((Long)itemPriceId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object companyId) {

					shoppingItemPrice.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"itemId",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getItemId();
				}

			});
		attributeSetterBiConsumers.put(
			"itemId",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object itemId) {

					shoppingItemPrice.setItemId((Long)itemId);
				}

			});
		attributeGetterFunctions.put(
			"minQuantity",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getMinQuantity();
				}

			});
		attributeSetterBiConsumers.put(
			"minQuantity",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object minQuantity) {

					shoppingItemPrice.setMinQuantity((Integer)minQuantity);
				}

			});
		attributeGetterFunctions.put(
			"maxQuantity",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getMaxQuantity();
				}

			});
		attributeSetterBiConsumers.put(
			"maxQuantity",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object maxQuantity) {

					shoppingItemPrice.setMaxQuantity((Integer)maxQuantity);
				}

			});
		attributeGetterFunctions.put(
			"price",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getPrice();
				}

			});
		attributeSetterBiConsumers.put(
			"price",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object price) {

					shoppingItemPrice.setPrice((Double)price);
				}

			});
		attributeGetterFunctions.put(
			"discount",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getDiscount();
				}

			});
		attributeSetterBiConsumers.put(
			"discount",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object discount) {

					shoppingItemPrice.setDiscount((Double)discount);
				}

			});
		attributeGetterFunctions.put(
			"taxable",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getTaxable();
				}

			});
		attributeSetterBiConsumers.put(
			"taxable",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object taxable) {

					shoppingItemPrice.setTaxable((Boolean)taxable);
				}

			});
		attributeGetterFunctions.put(
			"shipping",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getShipping();
				}

			});
		attributeSetterBiConsumers.put(
			"shipping",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object shipping) {

					shoppingItemPrice.setShipping((Double)shipping);
				}

			});
		attributeGetterFunctions.put(
			"useShippingFormula",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getUseShippingFormula();
				}

			});
		attributeSetterBiConsumers.put(
			"useShippingFormula",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice,
					Object useShippingFormula) {

					shoppingItemPrice.setUseShippingFormula(
						(Boolean)useShippingFormula);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<ShoppingItemPrice, Object>() {

				@Override
				public Object apply(ShoppingItemPrice shoppingItemPrice) {
					return shoppingItemPrice.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<ShoppingItemPrice, Object>() {

				@Override
				public void accept(
					ShoppingItemPrice shoppingItemPrice, Object status) {

					shoppingItemPrice.setStatus((Integer)status);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getItemPriceId() {
		return _itemPriceId;
	}

	@Override
	public void setItemPriceId(long itemPriceId) {
		_columnBitmask = -1L;

		_itemPriceId = itemPriceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_columnBitmask = -1L;

		if (!_setOriginalItemId) {
			_setOriginalItemId = true;

			_originalItemId = _itemId;
		}

		_itemId = itemId;
	}

	public long getOriginalItemId() {
		return _originalItemId;
	}

	@Override
	public int getMinQuantity() {
		return _minQuantity;
	}

	@Override
	public void setMinQuantity(int minQuantity) {
		_minQuantity = minQuantity;
	}

	@Override
	public int getMaxQuantity() {
		return _maxQuantity;
	}

	@Override
	public void setMaxQuantity(int maxQuantity) {
		_maxQuantity = maxQuantity;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public double getDiscount() {
		return _discount;
	}

	@Override
	public void setDiscount(double discount) {
		_discount = discount;
	}

	@Override
	public boolean getTaxable() {
		return _taxable;
	}

	@Override
	public boolean isTaxable() {
		return _taxable;
	}

	@Override
	public void setTaxable(boolean taxable) {
		_taxable = taxable;
	}

	@Override
	public double getShipping() {
		return _shipping;
	}

	@Override
	public void setShipping(double shipping) {
		_shipping = shipping;
	}

	@Override
	public boolean getUseShippingFormula() {
		return _useShippingFormula;
	}

	@Override
	public boolean isUseShippingFormula() {
		return _useShippingFormula;
	}

	@Override
	public void setUseShippingFormula(boolean useShippingFormula) {
		_useShippingFormula = useShippingFormula;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ShoppingItemPrice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ShoppingItemPrice toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ShoppingItemPrice)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ShoppingItemPriceImpl shoppingItemPriceImpl =
			new ShoppingItemPriceImpl();

		shoppingItemPriceImpl.setItemPriceId(getItemPriceId());
		shoppingItemPriceImpl.setCompanyId(getCompanyId());
		shoppingItemPriceImpl.setItemId(getItemId());
		shoppingItemPriceImpl.setMinQuantity(getMinQuantity());
		shoppingItemPriceImpl.setMaxQuantity(getMaxQuantity());
		shoppingItemPriceImpl.setPrice(getPrice());
		shoppingItemPriceImpl.setDiscount(getDiscount());
		shoppingItemPriceImpl.setTaxable(isTaxable());
		shoppingItemPriceImpl.setShipping(getShipping());
		shoppingItemPriceImpl.setUseShippingFormula(isUseShippingFormula());
		shoppingItemPriceImpl.setStatus(getStatus());

		shoppingItemPriceImpl.resetOriginalValues();

		return shoppingItemPriceImpl;
	}

	@Override
	public int compareTo(ShoppingItemPrice shoppingItemPrice) {
		int value = 0;

		if (getItemId() < shoppingItemPrice.getItemId()) {
			value = -1;
		}
		else if (getItemId() > shoppingItemPrice.getItemId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getItemPriceId() < shoppingItemPrice.getItemPriceId()) {
			value = -1;
		}
		else if (getItemPriceId() > shoppingItemPrice.getItemPriceId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ShoppingItemPrice)) {
			return false;
		}

		ShoppingItemPrice shoppingItemPrice = (ShoppingItemPrice)obj;

		long primaryKey = shoppingItemPrice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ShoppingItemPriceModelImpl shoppingItemPriceModelImpl = this;

		shoppingItemPriceModelImpl._originalItemId =
			shoppingItemPriceModelImpl._itemId;

		shoppingItemPriceModelImpl._setOriginalItemId = false;

		shoppingItemPriceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ShoppingItemPrice> toCacheModel() {
		ShoppingItemPriceCacheModel shoppingItemPriceCacheModel =
			new ShoppingItemPriceCacheModel();

		shoppingItemPriceCacheModel.itemPriceId = getItemPriceId();

		shoppingItemPriceCacheModel.companyId = getCompanyId();

		shoppingItemPriceCacheModel.itemId = getItemId();

		shoppingItemPriceCacheModel.minQuantity = getMinQuantity();

		shoppingItemPriceCacheModel.maxQuantity = getMaxQuantity();

		shoppingItemPriceCacheModel.price = getPrice();

		shoppingItemPriceCacheModel.discount = getDiscount();

		shoppingItemPriceCacheModel.taxable = isTaxable();

		shoppingItemPriceCacheModel.shipping = getShipping();

		shoppingItemPriceCacheModel.useShippingFormula = isUseShippingFormula();

		shoppingItemPriceCacheModel.status = getStatus();

		return shoppingItemPriceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ShoppingItemPrice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ShoppingItemPrice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingItemPrice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ShoppingItemPrice)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ShoppingItemPrice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ShoppingItemPrice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ShoppingItemPrice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ShoppingItemPrice)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		ShoppingItemPrice.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		ShoppingItemPrice.class, ModelWrapper.class
	};

	private long _itemPriceId;
	private long _companyId;
	private long _itemId;
	private long _originalItemId;
	private boolean _setOriginalItemId;
	private int _minQuantity;
	private int _maxQuantity;
	private double _price;
	private double _discount;
	private boolean _taxable;
	private double _shipping;
	private boolean _useShippingFormula;
	private int _status;
	private long _columnBitmask;
	private ShoppingItemPrice _escapedModel;

}