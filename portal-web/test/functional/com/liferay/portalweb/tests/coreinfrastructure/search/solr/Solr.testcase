@component-name = "portal-search"
definition {
	property osgi.app.includes = "portal-search-solr";
	property osgi.module.configuration.file.names = "com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config";
	property osgi.module.configurations = "blacklistBundleSymbolicNames=&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.api,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise.test.data,com.liferay.portal.mobile.device.detection.fiftyonedegrees,com.liferay.portal.search.elasticsearch,com.liferay.portal.search.elasticsearch.shield,com.liferay.portal.search.elasticsearch.shield.fragment,com.liferay.portal.search.elasticsearch.marvel.web&quot;";
	property portal.release = "true";
	property portal.suite.search.engine = "solr";
	property portal.upstream = "true";
	property solr.enabled = "true";
	property testray.main.component.name = "SOLR Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		Page.add(pageName = "Solr Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			MessageboardsThread.tearDownCP();

			DMDocument.tearDownCP();

			Page.tearDownPG();
		}
	}

	@priority = "4"
	test SearchAssetsScopeEverythingAcrossMultipleSites {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name 1");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "Apple"
		);

		PortletEntry.publish();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name 2");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Apple"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name 3");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntry(entryContent = "Blogs Entry Content", entryTitle = "Apple");

		Navigator.openURL();

		Portlet.gotoPortletOptions(
			portletName = "Search",
			portletOption = "Configuration"
		);

		Search.configureSearchScopePG(searchScope = "Everything");

		Navigator.openURL();

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Blogs Entry"
		);
	}

	@priority = "4"
	test SolrSmokeTest {
		property test.name.skip.portal.instance = "Solr#SolrSmokeTest";

		/* <description message="This smoke test is to ensure that Liferay is successfully running on a remote Solr by asserting the Solr administration dashboard and performing searches in portal. Note by default, an embedded Elasticsearch is deployed in portal." />

		<execute macro="Solr#viewAdminDashboard">
			<var name="solrVersion" value="5.2.1" />
		</execute>

		<execute macro="Solr#viewLiferayCoreAdminDashboard">
			<var name="coreName" value="liferay" />
			<var name="solrVersion" value="5.2.1" />
		</execute>
*/

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Message Boards"
		);

		MessageboardsThread.addCP(threadBody = "Orange", threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeServerResourcesActions(
			actionsDescription = "Reindex all search indexes."
		);

		Navigator.gotoPage(pageName = "Solr Page");

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Navigator.gotoPage(pageName = "Solr Page");

		Search.searchPG(searchTerm = "Orange");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);
	}

	@description = "This smoke test is to ensure that Liferay is successfully running on a remote SolrCloud with 2 nodes by asserting console logging for ZooKeeper and performing searches in portal. Note by default, an embedded Elasticsearch is deployed in portal."
	@ignore = "true"
	@priority = "4"
	test SolrWithSolrCloudSmokeTest {
		property solr.solrcloud.enabled = "true";
		property test.name.skip.portal.instance = "Solr#SolrWithSolrCloudSmokeTest";

		Solr.viewSolrwithSolrCloudEnabledInConsole();

		Solr.viewLiferayCloudDashboard(cloudCollectionName = "liferay");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Message Boards"
		);

		MessageboardsThread.addCP(threadBody = "Orange", threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeServerResourcesActions(
			actionsDescription = "Reindex all search indexes."
		);

		Navigator.gotoPage(pageName = "Solr Page");

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Navigator.gotoPage(pageName = "Solr Page");

		Search.searchPG(searchTerm = "Orange");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);
	}

	@description = "This smoke test is to ensure that Liferay is successfully running on a remote Solr with SSL Authentication by asserting console logging for KeyStoreLoaderImpl and performing searches in portal. Note by default, an embedded Elasticsearch is deployed in portal."
	@priority = "4"
	test SolrWithSSLAuthenticationSmokeTest {
		property solr.ssl.authentication.enabled = "true";
		property test.name.skip.portal.instance = "Solr#SolrWithSSLAuthenticationSmokeTest";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Message Boards"
		);

		MessageboardsThread.addCP(threadBody = "Orange", threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeServerResourcesActions(
			actionsDescription = "Reindex all search indexes."
		);

		Navigator.gotoPage(pageName = "Solr Page");

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Navigator.gotoPage(pageName = "Solr Page");

		Search.searchPG(searchTerm = "Orange");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);
	}

	@priority = "4"
	test ViewReindexAllSearchIndexesLoggingInSolrAdmin {
		property index.on.startup = "false";
		property solr.logging.info.level = "true";
		property test.name.skip.portal.instance = "Solr#ViewReindexAllSearchIndexesLoggingInSolrAdmin";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeServerResourcesActions(
			actionsDescription = "Reindex all search indexes."
		);

		Navigator.openSpecificURL(url = "http://localhost:8983/solr/#/~logging");

		Solr.viewLoggerNameInSolrAdminLogging();
	}
}