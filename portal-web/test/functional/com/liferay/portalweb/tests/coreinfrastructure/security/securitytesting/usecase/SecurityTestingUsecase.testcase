@component-name = "portal-security"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Security";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PortalSettings.tearDownAuthenticationCP();

			Page.tearDownPG();
		}
	}

	@description = "This is a use case for LPS-83566."
	@priority = "5"
	test EscapeUrlRedirectWithGroovyScript {
		property test.name.skip.portal.instance = "SecurityTestingUsecase#EscapeUrlRedirectWithGroovyScript";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeScriptCP(
			script = '''
import com.liferay.portal.kernel.util.PortalUtil;

out.println(PortalUtil.escapeRedirect("/"));
''',
			scriptLanguage = "Groovy"
		);

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "/"
		);
	}

	@priority = "5"
	test NoGuestRoleFromWCDArticleHistoryURL {
		property portal.acceptance = "true";
		var portalURL = PropsUtil.get("portal.url");
		var url = "${portalURL}/web/guest/home?&amp;p_p_id=com_liferay_journal_web_portlet_JournalPortlet&amp;p_p_lifecycle=0&amp;p_p_state=maximized&amp;p_p_mode=view&amp;_com_liferay_journal_web_portlet_JournalPortlet_struts_action=%2Fjournal%2Fview_article_history&amp;_com_liferay_journal_web_portlet_JournalPortlet_groupId=10180&amp;_com_liferay_journal_web_portlet_JournalPortlet_articleId=";

		Page.add(pageName = "Web Content Display Page");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentNavigator.gotoEditPGViaWCD();

		var articleID = selenium.getText("WCEditWebContent#ARTICLE_ID");

		User.logoutPG();

		Navigator.openSpecificURL(url = "${url}${articleID}");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "You do not have the roles required to access this portlet."
		);
	}

	@description = "This is a use case for LPS-68070."
	@priority = "5"
	test NoPermissionFromUnauthorizedURLAsPowerUser {
		property test.name.skip.portal.instance = "SecurityTestingUsecase#NoPermissionFromUnauthorizedURLAsPowerUser";

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.assignRegularRoleCP(roleName = "Power User", userScreenName = "usersn");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln"
		);

		UserBar.gotoProfile();

		WaitForSPARefresh();

		var groupId = Page.getGroupIdFromHtmlSource();

		var portalURL = PropsUtil.get("portal.url");

		Api.gotoPAuthURL(
			url = "${portalURL}/api/jsonws/layout/update-layout/group-id/${groupId}/private-layout/false/layout-id/1/type-settings/layout-template-id%3D2_columns_ii%0Acolumn-1%3Dcom_liferay_marketplace_app_manager_web_portlet_MarketplaceAppManagerPortlet?p_auth="
		);

		UserBar.gotoProfile();

		AssertElementNotPresent(
			locator1 = "ListGroupItem#ITEM_NAME",
			key_itemName = "Liferay Marketplace"
		);

		Portlet.viewBody(
			portletBody = "Portlet is temporarily unavailable.",
			portletName = "App Manager"
		);

		AssertConsoleTextPresent(
			value1 = "must be the company administrator to perform the action"
		);
	}

	@priority = "5"
	test ValidateBeanIdentifierUserPermissions {
		property portal.acceptance = "true";
		var portalURL = PropsUtil.get("portal.url");
		var url = "${portalURL}/c/portal/json_service?serviceClassName=com.liferay.portal.service.AccountServiceUtil&amp;serviceMethodName=getBeanIdentifier&amp;p_auth=";

		Api.gotoPAuthURL();

		Pause(locator1 = "1000");

		AssertElementNotPresent(locator1 = "JSONWS#SECURITY_TEST_PAGE_POPULATED");
	}

	@priority = "4"
	test ValidateCannotStealAdminAccount {
		property test.name.skip.portal.instance = "SecurityTestingUsecase#ValidateCannotStealAdminAccount";
		var portalURL = PropsUtil.get("portal.url");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln"
		);

		Api.gotoPAuthURL(
			url = "${portalURL}/api/jsonws/user/update-status/user-id/20250/status/6?p_auth="
		);

		AssertTextEquals.assertPartialText(
			locator1 = "Home#DIRECT_URL",
			value1 = "must have DELETE permission for com.liferay.portal.kernel.model.User"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "Home#DIRECT_URL",
			value1 = "com.liferay.portal.kernel.security.auth.PrincipalException$MustHavePermission"
		);

		AssertConsoleTextPresent(
			value1 = "must have DELETE permission for com.liferay.portal.kernel.model.User"
		);
	}

	@priority = "5"
	test ValidateForwardURLPG {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,${ip.address}";
		property portal.acceptance = "true";
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(
			url = "${portalURL}/html/common/forward_jsp.jsp?FORWARD_URL=http://www.msn.com"
		);

		Pause(locator1 = "3000");

		var key_pageName = "Welcome";

		AssertElementPresent(locator1 = "Home#PAGE");

		AssertTextEquals.assertText(
			locator1 = "HelloWorld#PORTLET_TITLE",
			value1 = "Hello World"
		);

		AssertElementPresent(locator1 = "HelloWorld#PORTLET_CONTENT");

		Page.add(pageName = "Test");

		Open(
			locator1 = "${portalURL}/html/common/forward_jsp.jsp?FORWARD_URL=${portalURL}/web/guest/test"
		);

		var key_pageName = "Test";

		AssertElementPresent(locator1 = "Home#PAGE");
	}

	@description = "This is a use case for LPS-73595."
	@priority = "5"
	test ViewJSLoaderModulesURLNoWiki {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/o/js_loader_modules");

		AssertConsoleTextPresent(value1 = "com.liferay.wiki.engine.html");

		AssertConsoleTextPresent(value1 = "com.liferay.wiki.engine.text");

		AssertTextNotPresent(value1 = "com.liferay.wiki.engine.html");

		AssertTextNotPresent(value1 = "com.liferay.wiki.engine.text");
	}

	@description = "This is a use case for LPS-55622."
	@priority = "5"
	test ViewNoInvokedPortletViaURL {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(
			url = "${portalURL}/web/guest/home/?p_p_id=asdf&amp;p_p_lifecycle=0&amp;p_p_state=maximized&amp;_asdf_mvcPath=/html/portlet/portal_settings/edit_company.jsp"
		);

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "This portlet has been undeployed. Please redeploy it or remove it from the page."
		);
	}

	@priority = "4"
	test ViewUpdateUserViaJSONWS {
		property test.name.skip.portal.instance = "SecurityTestingUsecase#ViewUpdateUserViaJSONWS";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeServerResourcesActions(
			actionsDescription = "Reindex all search indexes."
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		var key_userScreenName = "test";

		AssertClick(
			locator1 = "UsersAndOrganizations#USER_TABLE_SCREEN_NAME_LINK",
			value1 = "test"
		);

		Pause(locator1 = "5000");

		var userId = selenium.getElementValue("UsersAndOrganizationsEditUser#DETAILS_USER_ID_FIELD");

		Api.apiJsonwsUserView();

		Api.editJsonwsUserView(
			userBirthdayDay = "24",
			userBirthdayMonth = "10",
			userBirthdayYear = "1984",
			userEmailAddress = "test1@liferay.com",
			userFacebookId = "0",
			userFirstName = "test1",
			userId = "${userId}",
			userLastName = "test1",
			userPrefixId = "0",
			userScreenName = "test1",
			userSuffixId = "0"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		var key_userScreenName = "test1";

		AssertClick(
			locator1 = "UsersAndOrganizations#USER_TABLE_SCREEN_NAME_LINK",
			value1 = "test1"
		);

		AssertValue(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_USER_ID_FIELD",
			value1 = "${userId}"
		);

		AssertValue(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
			value1 = "test1"
		);

		AssertValue(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
			value1 = "test1"
		);

		AssertValue(locator1 = "TextInput#EMAIL_ADDRESS", value1 = "test1@liferay.com");

		AssertValue(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
			value1 = "test1"
		);

		AssertValue(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_BIRTHDAY_FIELD",
			value1 = "11/24/1984"
		);
	}
}