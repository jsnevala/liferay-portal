@component-name = "portal-security"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Security";

	setUp {
		TestCase.setUpPortalInstance();
	}

	@priority = "4"
	test CASSmoke {
		property test.name.skip.portal.instance = "Login#CASSmoke";
		property web.plugins.includes = "cas-web";
		var portalURL = PropsUtil.get("portal.url");
		var userEmailAddress = "userea@liferay.com";
		var userFirstName = "userfn";
		var userLastName = "userln";
		var userScreenName = "usersn";

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "${userEmailAddress}",
			userFirstName = "${userFirstName}",
			userLastName = "${userLastName}",
			userScreenName = "${userScreenName}"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "${userEmailAddress}",
			userScreenName = "${userScreenName}"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.editConfigurationAuthenticationGeneral(
			authenticationMethod = "By Screen Name"
		);

		PortalSettings.editConfigurationAuthenticationCAS(
			casLoginURL = "${portalURL}/cas-web/login",
			casLogoutURL = "${portalURL}/cas-web/logout",
			casServerURL = "${portalURL}/cas-web",
			casServiceURL = "${portalURL}/c/portal/login"
		);

		User.logoutPG();

		User.viewLoggedOutWithCASEnabledPG();

		User.loginUserWithCASEnabledPG(userScreenName = "${userScreenName}");

		User.logoutPG();

		User.loginUserWithCASEnabledPG(userScreenName = "test");
	}

	@priority = "4"
	test FacebookSSOSmoke {
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "Login#FacebookSSOSmoke";
		var facebookApplicationID = PropsUtil.get("facebook.application.id");
		var facebookApplicationSecret = PropsUtil.get("facebook.application.secret");
		var facebookEmail = PropsUtil.get("facebook.email");
		var facebookPassword = PropsUtil.get("facebook.password");

		User.firstLoginPG();

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		Panel.expandPanel(panelHeading = "Authentication");

		PortalSettingsNavigator.gotoAuthenticationFacebook();

		PortalSettings.editConfigurationAuthenticationFacebook(
			facebookApplicationID = "${facebookApplicationID}",
			facebookApplicationSecret = "${facebookApplicationSecret}"
		);

		User.logoutPG();

		User.loginUserWithFacebookSSOEnabledPG(
			facebookEmail = "${facebookEmail}",
			facebookPassword = "${facebookPassword}",
			siteName = "${siteName}"
		);

		User.logoutUserPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com",
			userScreenName = "usersn"
		);
	}

	@priority = "4"
	test GoogleSSOSmoke {
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "Login#GoogleSSOSmoke";
		var googlePropertiesSet = MathUtil.randomNumber("3");
		var googleClientID = PropsUtil.get("google.client.id.${googlePropertiesSet}");
		var googleClientSecret = PropsUtil.get("google.client.secret.${googlePropertiesSet}");
		var userEmailAddress = PropsUtil.get("email.address.1");
		var userPassword = PropsUtil.get("email.password.1");

		User.firstLoginPG();

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		Panel.expandPanel(panelHeading = "Authentication");

		PortalSettingsNavigator.gotoAuthenticationGoogle();

		PortalSettings.enableGoogleSSOCP(
			googleClientID = "${googleClientID}",
			googleClientSecret = "${googleClientSecret}"
		);

		User.logoutPG();

		User.loginUserWithGoogleSSOEnabledPG(
			siteName = "${siteName}",
			userEmailAddress = "${userEmailAddress}",
			userPassword = "${userPassword}"
		);

		User.logoutPG();

		User.loginUserPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test Login {
		property test.name.skip.portal.instance = "Login#Login";

		User.firstLoginPG();

		User.logoutPG();

		User.loginPG();
	}

	@priority = "4"
	test LoginFirstTime {
		SignIn.signIn();

		SignIn.agreeToTermsOfUse();

		SignIn.setPasswordReminder();

		Smoke.viewWelcomePage();
	}

	@description = "This is a use case for LPS-48653."
	@priority = "5"
	test LoginWithSessionEnabled {
		property custom.properties = "session.enable.url.with.session.id=true";

		User.firstLoginPG();

		Portlet.addPG(portletName = "Sign In");

		User.logoutPG();

		SignIn.signIn();

		Smoke.viewWelcomePage();
	}

	@description = "This is a use case for LPS-72398."
	@ignore = "true"
	@priority = "5"
	test LoginWithSpanishOnlyEnabledLocale {
		property test.name.skip.portal.instance = "Login#LoginWithSpanishOnlyEnabledLocale";

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.configureCurrentLanguagesCP(
			currentPortalLanguages = "Spanish (Spain)"
		);

		User.logoutPG();

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		Portlet.assertServerStartup();

		User.loginPG(
			localization = "ES",
			password = "test",
			userEmailAddress = "test@liferay.com"
		);
	}

	@ignore = "true"
	@priority = "4"
	test OpenIDSmoke {
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "Login#OpenIDSmoke";

		// LRQA-43015

		var openIDPassword = PropsUtil.get("openid.password");
		var openIDUsername = PropsUtil.get("openid.username");

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		Panel.expandPanel(panelHeading = "Authentication");

		PortalSettingsNavigator.gotoAuthenticationOpenID();

		PortalSettings.enableOpenIDCP();

		User.logoutPG();

		User.loginUserWithOpenIDEnabledPG(
			openIDPassword = "${openIDPassword}",
			openIDUsername = "${openIDUsername}",
			password = "test",
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2"
		);

		User.logoutPG();

		User.loginUserPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "5"
	test OpenSSOSmoke {
		property dummy.socket.proxy.disabled = "true";
		property openam.enabled = "true";
		property test.name.skip.portal.instance = "Login#OpenSSOSmoke";

		Navigator.openSpecificURL(url = "http://test.able.com:8080/openam");

		AntCommand(
			locator1 = "build-test-authentication.xml",
			value1 = "run-openam-tools"
		);

		var pauseCount = "0";

		while ((IsElementNotPresent(locator1 = "TextInput#USER_NAME")) && (!("${pauseCount}" == "20")) && (maxIterations = "30")) {
			Refresh();

			Pause(locator1 = "30000");

			var pauseCount = MathUtil.sum("${pauseCount}", "1");

			echo("Pause count: ${pauseCount}");
		}

		if ("${pauseCount}" == "20") {
			fail("OpenAM setup timed out after 10 minutes.");
		}

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		Pause(locator1 = "30000");

		Panel.expandPanel(panelHeading = "Authentication");

		PortalSettingsNavigator.gotoAuthenticationOpenSSO();

		PortalSettings.configureOpenSSO(
			OpenSSOLoginURL = "http://test.able.com:8080/openam/UI/Login?goto=http://www.able.com:8080/c/portal/login",
			OpenSSOLogoutURL = "http://test.able.com:8080/openam/UI/Logout?goto=http://www.able.com:8080/web/guest/home",
			OpenSSOServiceURL = "http://test.able.com:8080/openam"
		);

		PortalSettingsNavigator.gotoAuthenticationOpenSSO();

		PortalSettings.testOpenSSOConnection();

		User.logoutPG();

		User.loginUserWithOpenSSOEnabledPG(
			hostsURL = "http://www.able.com:8080",
			password = "password",
			userScreenName = "test"
		);
	}

	@priority = "5"
	test TokenBasedSSOSmoke {
		property test.name.skip.portal.instance = "Login#TokenBasedSSOSmoke";

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoCategory(category = "Foundation");

		SystemSettings.viewConfiguration(configurationName = "Token Based SSO");

		SystemSettings.enableSetting(checkboxSetting = "ENABLED_CHECKBOX");

		PortletEntry.save();

		User.logoutPG();

		AntCommand(
			locator1 = "build-test-authentication.xml",
			value1 = "verify-token-based-login"
		);
	}
}