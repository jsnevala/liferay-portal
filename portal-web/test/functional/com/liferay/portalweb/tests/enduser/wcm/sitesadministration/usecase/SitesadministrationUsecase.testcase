@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.tearDownCP();

			Site.tearDownCP();

			Organization.tearDownCP();

			Team.tearDownCP();

			Page.tearDownPG();

			UserGroup.tearDownCP();
		}
	}

	@priority = "5"
	test AddOrganizationSitesAndDeactivate {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SitesadministrationUsecase#AddOrganizationSitesAndDeactivate";
		property testray.component.names = "Training";

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Organization.addCP(orgName = "Organization Name 1", orgType = "Organization");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			organizationSite = "Community Site",
			orgName = "Organization Name 1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.manageMembershipOptionsInSites(
			allowManualMembershipManagement = "true",
			membershipType = "Open",
			orgName = "Organization Name 1",
			selectMembershipType = "true"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.viewCP(siteMember = "Organization", siteName = "Organization Name 1");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Organization.addCP(orgName = "Organization Name 2", orgType = "Organization");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			organizationSite = "Intranet Site",
			orgName = "Organization Name 2"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.manageMembershipOptionsInSites(
			allowManualMembershipManagement = "true",
			membershipType = "Open",
			orgName = "Organization Name 2",
			selectMembershipType = "true"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.viewCP(siteMember = "Organization", siteName = "Organization Name 2");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Site.assignUserSitesCP(
			siteName = "Organization Name 1",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Site.assignUserSitesCP(
			siteName = "Organization Name 2",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.assignRegRoleCP(roleName = "Administrator", userScreenName = "usersn");

		User.firstLoginPG(userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Organization Name 1");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Organization Name 1",
			siteTemplate = "Community"
		);

		Navigator.openSiteURL(siteName = "Organization Name 2");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Organization Name 2",
			siteTemplate = "Intranet"
		);

		Navigator.openSiteURL(siteName = "Organization Name 2");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.deactivateCP(siteName = "Organization Name 2", successMessage = "true");

		Navigator.openSiteURL(siteName = "Organization Name 2");

		AssertTextEquals(
			locator1 = "Home#STATUS_MESSAGE",
			value1 = "This site is inactive. Please contact the administrator."
		);

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test AddSiteNameTranslations {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		LexiconEntry.gotoAddMenuItem(menuItem = "Blank Site");

		PortletEntry.inputName(name = "Site Name");

		PortletEntry.inputLocalizedName(
			language = "es_ES",
			localizedName = "Nombre del Sitio"
		);

		PortletEntry.inputLocalizedName(language = "zh_CN", localizedName = "站点名称");

		PortletEntry.save();

		Page.add(pageName = "Page Name");

		Portlet.addPG(portletName = "Language Selector");

		Navigator.gotoSitePage(pageName = "Page Name", siteName = "Site Name");

		Page.viewSiteNameTranslationsPG(language = "English", siteName = "Site Name");

		Page.viewSiteNameTranslationsPG(
			language = "español",
			siteName = "Nombre del Sitio"
		);

		Page.viewSiteNameTranslationsPG(language = "中文", siteName = "站点名称");

		LanguagePortlet.tearDownLanguagePG();
	}

	@priority = "3"
	test MySitesDropDownDoesNotShowUserOrganizationOnTop {
		for (var siteNameListsCount : list "Site1 Name,Site2 Name,Site3 Name,Site4 Name,Site5 Name,Site6 Name,Site7 Name,Site8 Name,Site9 Name,Site10 Name") {
			ProductMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites"
			);

			Site.addCommunityCP(siteName = "${siteNameListsCount}");
		}

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Organization.addCP(orgName = "Site Organization Name", orgType = "Organization");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			organizationSite = "Community Site",
			orgName = "Site Organization Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addMemberCP(
			orgName = "Site Organization Name",
			userFirstName = "Test",
			userLastName = "Test",
			userScreenName = "test"
		);

		Navigator.openSiteURL(siteName = "Site Organization Name");
	}

	@priority = "3"
	test OnlySiteOwnersCanAssignSiteRolesToUserGroups {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.addCP(roleName = "Roles Siterole Name", roleType = "Site");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups"
		);

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Memberships"
		);

		Site.assignUserGroupAsMemberCP(userGroupName = "UG UserGroup Name");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.addCP(roleName = "Roles Regrole Name");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "CONTROL_PANEL_GENERAL_PERMISSIONS_GO_TO_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "View Control Panel Menu",
			roleName = "Roles Regrole Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "CONTROL_PANEL_SITES_SITES_RESOURCE_PERMISSIONS_SITE_ASSIGN_MEMBERS_CHECKBOX",
			permissionDefinitionValue = "Assign Members",
			roleName = "Roles Regrole Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "CONTROL_PANEL_SITES_SITES_RESOURCE_PERMISSIONS_SITE_ASSIGN_USER_ROLES_CHECKBOX",
			permissionDefinitionValue = "Assign User Roles",
			roleName = "Roles Regrole Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_RESOURCE_PERMISSIONS_SITE_GO_TO_SITE_ADMINISTRATION_CHECKBOX",
			permissionDefinitionValue = "Go to Site Administration",
			roleName = "Roles Regrole Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "CONTROL_PANEL_USERS_ROLES_RESOURCE_PERMISSIONS_ROLE_ASSIGN_MEMBERS_CHECKBOX",
			permissionDefinitionValue = "Assign Members",
			roleName = "Roles Regrole Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editUserSiteCP(siteName = "${siteName}", userScreenName = "usersn");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.assignRegRoleCP(roleName = "Roles Regrole Name", userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Memberships"
		);

		Site.assignSiteRoleCP(
			resourceName = "userfn userln",
			roleName = "Roles Siterole Name"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Memberships"
		);

		Navigator.gotoNavItem(navItem = "User Groups");

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test"
		);
	}

	@priority = "4"
	test PrivateVirtualHostUrlDoesNotRedirectUserToLoginPage {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.addVirtualHostsURLCP(
			privatePageVirtualHostURL = "www.able.com",
			privateVirtualHosts = "true"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Test Private Page", sitePagePrivacy = "Private");

		User.logoutPG();

		Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");

		Site.viewPrivateVirtualHostUrlUserLoginRedirect(
			userEmailAddress = "@liferay.com"
		);

		User.loginUserPG(password = "test", userEmailAddress = "test@liferay.com");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editUserSiteCP(siteName = "${siteName}", userScreenName = "usersn");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com",
			virtualHostsURL = "http://www.able.com:8080/test-private-page"
		);

		Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");

		AssertLocation(value1 = "http://www.able.com:8080/test-private-page");

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "3"
	test ReturnWrongLayoutForSignedInUserWithVirtualHostsConfigured {
		property custom.properties = "layout.default.template.id=2_columns_iii${line.separator}layout.user.private.layouts.enabled=false${line.separator}layout.user.private.layouts.auto.create=false${line.separator}layout.user.private.layouts.power.user.required=true${line.separator}layout.user.public.layouts.enabled=false${line.separator}layout.user.public.layouts.auto.create=false${line.separator}layout.user.public.layouts.power.user.required=true";
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "SiteadministrationUsecase#ReturnWrongLayoutForSignedInUserWithVirtualHostsConfigured";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.editVirtualHostCP(virtualHostName = "www.able.com");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.editConfigurationAuthenticationGeneral(
			enableRequireStrangers = "true"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.editConfigurationUsersEmailNotificationsCP();

		PortalSettings.editConfigurationUsersEmailVerificationNotificationsCP();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		Site.addVirtualHostsURLCP(
			publicPageVirtualHostURL = "www.baker.com",
			publicVirtualHosts = "true"
		);

		SitePageNavigator.gotoPages(page = "Public Pages");

		Page.add(pageName = "Site Page Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.configureMailServerSettings(
			userName = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2")
		);

		Navigator.openSpecificURL(url = "http://www.able.com:8080/");

		Navigator.openSpecificURL(url = "http://www.baker.com:8080/");

		User.logoutPG();

		User.addCreateAccountPG(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		Gmail.login(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3")
		);

		Gmail.gotoHtmlMode();

		Gmail.gotoMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "New Account",
			gmailMessageTitle = "Your New Account"
		);

		var emailPassword = selenium.getText("Gmail#EMAIL_PASSWORD");

		Gmail.gotoHtmlMode();

		Gmail.gotoMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "Address Verification",
			gmailMessageTitle = "Email Address Verification"
		);

		var emailVerification = selenium.getText("Gmail#EMAIL_VERIFICATION_CODE");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(
			gmailMessageTitleList = "Email Address Verification,Your New Account,Your New Password"
		);

		Navigator.openSpecificURL(url = "http://www.baker.com:8080/");

		User.signInPG(
			emailPassword = "${emailPassword}",
			emailVerification = "${emailVerification}",
			userEmailAddress = PropsUtil.get("email.address.3")
		);

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.editConfigurationUsersEmailVerificationNotificationsCP(
			emailVerificationURL = "true"
		);

		Navigator.openSpecificURL(url = "http://www.baker.com:8080/");

		User.editEmailViaMyAccount(userEmailAddress = PropsUtil.get("email.address.4"));

		Gmail.logoutAndLogin(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userPassword = PropsUtil.get("email.password.4")
		);

		Gmail.gotoHtmlMode();

		Gmail.gotoMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "Address Verification",
			gmailMessageTitle = "Email Address Verification"
		);

		var emailAddressVerificationURL = selenium.getText("Gmail#EMAIL_ADDRESS_VERIFICATION_URL");

		Click(locator1 = "Gmail#EMAIL_ADDRESS_VERIFICATION_URL");

		SelectWindow(locator1 = "title=Verify Email Address - ${siteName}");

		AssertLocation(value1 = "${emailAddressVerificationURL}");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(
			gmailMessageTitleList = "Email Address Verification,Your New Account,Your New Password"
		);
	}

	@priority = "3"
	test SiteFriendlyURLLayoutImporter {
		var portalURL = PropsUtil.get("portal.url");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups"
		);

		UserGroup.addCP(userGroupName = "User Group Name");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups"
		);

		UserGroup.addPageCP(
			pageName = "site Page Name",
			sitePagePrivacy = "Public",
			userGroupName = "User Group Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups"
		);

		UserGroup.assignMemberCP(
			userGroupName = "User Group Name",
			userScreenName = "usersn"
		);

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		UserBar.gotoDashboard();

		AssertLocation(value1 = "${portalURL}/user/usersn");

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");

		Page.add(pageName = "Site Page Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/liferay");

		Navigator.openSpecificURL(url = "${portalURL}/web/liferay/site-page-name");

		AssertLocation(value1 = "${portalURL}/web/liferay/site-page-name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/guest");
	}

	@priority = "3"
	test SitesDeactivated {
		property test.name.skip.portal.instance = "SitesadministrationUsecase#SitesDeactivated";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site1 Name");

		Site.selectPageType(selectPublicPages = "true", siteTemplate = "Community Site");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site2 Name");

		ProductMenu.gotoSite(site = "Site2 Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.editCP(siteName = "Site2 Name", siteNameEdit = "Site2 Name Edit");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editUserSiteCP(siteName = "Site1 Name", userScreenName = "usersn");

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Site1 Name");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Site1 Name",
			siteTemplate = "Community"
		);

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");

		ProductMenu.gotoSite(site = "Site1 Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.inactivateCP(siteName = "Site1 Name");

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Site1 Name");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_INFO",
			value1 = "This site is inactive. Please contact the administrator."
		);

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test SitesDemoSiteManagement {
		property portal.release = "false";
		property test.name.skip.portal.instance = "SitesadministrationUsecase#SitesDemoSiteManagement";
		var portalURL = PropsUtil.get("portal.url");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(
			membershipTypeOption = "Open",
			siteDescription = "This is the site description test",
			siteDetails = "true",
			siteName = "World Cup - Russia 2018"
		);

		for (var tagName : list "World Cup,Russia,2018") {
			Tag.addViaSiteCP(tagName = "${tagName}");
		}

		Site.addVirtualHostsURLCP(
			privatePageVirtualHostURL = "www.baker.com",
			privateVirtualHosts = "true",
			publicPageVirtualHostURL = "www.able.com",
			publicVirtualHosts = "true"
		);

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/russia2018");

		for (var publicPageName : list "Home,Arenas") {
			Page.add(pageName = "${publicPageName}");
		}

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			Page.addChild(
				childSitepageName = "true",
				page = "Public Pages",
				pageName = "Arenas",
				siteChildPageName = "${childPageName}",
				siteScopeSelected = "true"
			);
		}

		for (var privatePageName : list "Accomodations,Maps") {
			Page.add(pageName = "${privatePageName}", sitePagePrivacy = "Private");
		}

		ProductMenu.gotoPublicPages();

		Page.changeLogoViaPageCP(logoFile = "Document_3.png", page = "Public Pages");

		Page.addJavaScript(
			javaScript = "alert(&apos;Welcome to Russia.&apos;);",
			pageName = "Arenas"
		);

		Confirm(value1 = "Welcome to Russia.");

		Alert.viewSuccessMessage();

		Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

		Confirm(value1 = "Welcome to Russia.");

		User.logoutPG();

		Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

		Confirm(value1 = "Welcome to Russia.");

		User.loginUserPG(password = "test", userEmailAddress = "test@liferay.com");

		Open.openNoError(locator1 = "${portalURL}/web/russia2018");

		Page.viewCustomLogoPG();

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			Page.viewChildPageDropdown(
				childPageName = "${childPageName}",
				javaScriptPage = "Welcome to Russia.",
				pageName = "Arenas",
				viewChildPageDropdown = "PAGE_2"
			);
		}

		Open.openNoError(locator1 = "${portalURL}/web/russia2018");

		ProductMenu.gotoPublicPages();

		Page.addJavaScript(javaScript = " ", pageName = "Arenas");

		Alert.viewSuccessMessage();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Site.assignUserSitesCP(
			siteName = "World Cup - Russia 2018",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.assignSiteRoleCP(
			siteRoleName = "Site Administrator",
			userScreenName = "usersn"
		);

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com",
			virtualHostsURL = "www.baker.com:8080/group/russia2018"
		);

		Navigator.openSpecificURL(url = "http://www.baker.com:8080/group/russia2018");

		Page.viewSpecificPG(pageNameList = "Accomodations,Maps");

		Navigator.openSpecificURL(url = "${portalURL}/web/russia2018");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);

		LexiconEntry.gotoAdd();

		LAR.exportSuccess();

		Portlet.changeDisplayStyle(displayStyle = "List");

		var valueName = selenium.getAttribute("//tr/td[7]//span/a@href");

		echo("value name ${valueName}");

		var larFileName = RegexUtil.replace("${valueName}", "http://localhost:8080/documents/portlet_file_entry/[0-9]*/([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		echo("import file name ${larFileName}");

		Portlet.changeDisplayStyle(displayStyle = "Descriptive");

		Click(locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_DOWNLOAD");

		DownloadTempFile();

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(larFileName = "${larFileName}", siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Home", siteName = "Site Name");

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			Page.viewChildPageDropdown(
				childPageName = "${childPageName}",
				pageName = "Arenas",
				viewChildPageDropdown = "PAGE_2"
			);
		}
	}

	@priority = "4"
	test SiteTeamsPermissions {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		Page.add(pageName = "Blog Page Template", pageTemplateName = "Blog");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea1@liferay.com",
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editUserSiteCP(siteName = "Site Name", userScreenName = "usersn1");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea2@liferay.com",
			userScreenName = "usersn2"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editUserSiteCP(siteName = "Site Name", userScreenName = "usersn2");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Teams"
		);

		Team.addCP(
			teamDescription = "Site Team Description",
			teamName = "Site Team Name"
		);

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Teams"
		);

		Team.assignMembersCP(teamName = "Site Team Name", userScreenName = "usersn1");

		Navigator.gotoSitePage(pageName = "Blog Page Template", siteName = "Site Name");

		PermissionsInline.gotoPagePG(pageName = "Blog Page Template");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleName = "Guest"
		);

		Navigator.gotoSitePage(pageName = "Blog Page Template", siteName = "Site Name");

		PermissionsInline.gotoPagePG(pageName = "Blog Page Template");

		for (var permissionsInLineUncheckListsCount : list "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX") {
			Role.removePermissionPG(
				permissionDefinitionKey = "${permissionsInLineUncheckListsCount}",
				roleName = "Site Member"
			);
		}

		Navigator.gotoSitePage(pageName = "Blog Page Template", siteName = "Site Name");

		PermissionsInline.gotoPagePG(pageName = "Blog Page Template");

		for (var permissionsInLineCheckListsCount : list "ACTION_ADD_DISCUSSION,ACTION_ADD_LAYOUT,ACTION_CONFIGURE_PORTLETS,ACTION_CUSTOMIZE,ACTION_DELETE,ACTION_DELETE_DISCUSSION,ACTION_PERMISSIONS,ACTION_UPDATE,ACTION_UPDATE_DISCUSSION,ACTION_VIEW") {
			Team.definePermissionPG(
				permissionDefinitionKey = "${permissionsInLineCheckListsCount}",
				teamName = "Site Team Name"
			);
		}

		PortletEntry.save();

		for (var permissionsInLineCheckListsCount : list "ACTION_ADD_DISCUSSION,ACTION_ADD_LAYOUT,ACTION_CONFIGURE_PORTLETS,ACTION_CUSTOMIZE,ACTION_DELETE,ACTION_DELETE_DISCUSSION,ACTION_PERMISSIONS,ACTION_UPDATE,ACTION_UPDATE_DISCUSSION,ACTION_VIEW") {
			Team.viewPermissionPG(
				permissionDefinitionKey = "${permissionsInLineCheckListsCount}",
				teamName = "Site Team Name"
			);
		}

		User.firstLoginPG(password = "test", userEmailAddress = "userea1@liferay.com");

		Navigator.gotoSitePage(pageName = "Blog Page Template", siteName = "Site Name");

		PageTemplate.viewDefaultPortletPG(
			pageTemplateName = "Blog",
			portletTitleList = "Blogs,Tag Cloud,Recent Bloggers"
		);

		User.firstLoginPG(password = "test", userEmailAddress = "userea2@liferay.com");

		Navigator.openSiteURL(siteName = "Site Name");

		AssertElementNotPresent(locator1 = "Home#PAGE");

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test SiteTeamsXSS {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Teams"
		);

		Team.addCP(
			teamDescription = '''<script>alert(123);</script>''',
			teamName = '''<script>alert(123);</script>'''
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.assignDefaultSiteTeam(teamName = '''<script>alert(123);</script>''');

		AssertAlertNotPresent();

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@description = "This is a use case for LPS-44550"
	@priority = "4"
	test SiteTemplateXSS {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Site Templates"
		);

		SiteTemplates.addCP(
			siteTemplateActive = "Yes",
			siteTemplateName = '''<script>alert(123);</script>'''
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addSiteTemplateCP(
			siteName = "Site Name",
			siteTemplateName = '''<script>alert(123);</script>''',
			siteType = "Site Template"
		);

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Panel.expandPanel(panelHeading = "Pages");

		Uncheck.uncheckToggleSwitch(locator1 = "Checkbox#ENABLE_PROPAGATION");

		Button.clickSave();

		AssertAlertNotPresent();

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}
}