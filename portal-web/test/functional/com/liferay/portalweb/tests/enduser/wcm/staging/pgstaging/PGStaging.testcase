@component-name = "portal-staging"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Staging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Staging Test Page", siteName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();
		}
	}

	@priority = "4"
	test ActivateDeactivateRemoteStaging {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.docx",
			dmDocumentTitle = "DM Document Title",
			pageName = "Staging Test Page",
			stagingActivated = "true"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		DMPortlet.setDescriptiveView();

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deactivateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title"
		);
	}

	@priority = "4"
	test ActivateDeactivateStagingLocalLiveDM {
		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(
			pageName = "Staging Test Page",
			portletName = "Documents and Media"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		DMDocument.addPG(
			dmDocumentFile = "Document_1.docx",
			dmDocumentTitle = "Document_1.docx",
			pageName = "Staging Test Page",
			pageStaging = "true",
			stagingActivated = "true"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Pause(locator1 = "30000");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deactivateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no documents or media files in this folder."
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		DMDocument.viewPGviaStagingLocalLive(
			documentAdded = "false",
			pageName = "Staging Test Page",
			pageStaging = "true"
		);
	}

	@priority = "5"
	test ActivateRemoteStaging {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property portal.acceptance = "true";

		Staging.remoteStagingSetUp(siteName = "Site Name");
	}

	@priority = "5"
	test AddDMDocumentWCArticleStagingLocalLive {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(
			pageName = "Staging Test Page",
			portletName = "Documents and Media"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		DMDocument.addPG(
			dmDocumentFile = "Document_1.docx",
			dmDocumentTitle = "Document_1.docx",
			pageName = "Staging Test Page",
			pageStaging = "true",
			stagingActivated = "true"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Content.addPG(
			assetTitle = "Web Content Title",
			pageName = "Staging Test Page",
			webContentContent = "Web Content Content"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		DMDocument.viewPGviaStagingLocalLive(
			dmDocumentTitle = "Document_1.docx",
			documentAdded = "true",
			pageName = "Staging Test Page",
			pageStaging = "true"
		);
	}

	@priority = "3"
	test AssertEditWebContentStaging {
		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		WebContent.viewEditWCViaWCD(webContentContent = "Web Content Content");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		WebContent.viewNoEditWCViaWCD(webContentContent = "Web Content Content");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deactivateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		WebContent.viewEditWCViaWCD(webContentContent = "Web Content Content");
	}

	@priority = "5"
	test AssertNoEditLink {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Blogs Test Page", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Blogs Test Page", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "AP Test Page", siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "AP Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoSitePage(pageName = "Blogs Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSitePage(pageName = "Blogs Test Page", siteName = "Site Name");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoSitePage(pageName = "AP Test Page", siteName = "Site Name");

		AssetPublisherPortlet.viewEditLinkPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "AP Test Page", siteName = "Site Name");

		AssetPublisherPortlet.viewNoEditLinkPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deactivateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "AP Test Page", siteName = "Site Name");

		AssetPublisherPortlet.viewEditLinkPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "4"
	test DeactivateStaging {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Pause(locator1 = "30000");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deactivateStagingCP(siteName = "Site Name");
	}

	@priority = "4"
	test DeleteDMDocument {
		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		SitePageNavigator.gotoEditPage(page = "Staging Test Page");

		Page.editPageLayoutColumn(columnName = "1 Column");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(
			pageName = "Staging Test Page",
			portletName = "Documents and Media"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		Click(locator1 = "Icon#DISPLAY_STYLE_DESCRIPTIVE");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		DMDocument.addPG(
			dmDocumentFile = "Document_1.docx",
			dmDocumentTitle = "DM Document Title",
			stagingActivated = "true"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		var key_dmDocumentTitle = "DM Document Title";

		AssertElementPresent(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_ICON"
		);

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "DM Document Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		DMDocument.deletePG(dmDocumentTitle = "DM Document Title");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(contentDeletion = "true");

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		var key_dmDocumentTitle = "DM Document Title";

		AssertElementNotPresent(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_ICON"
		);
	}

	@priority = "4"
	test LayoutScope {
		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(pageName = "Staging Test Page", portletName = "Message Boards");

		MessageboardsPortlet.configureScopePG(
			scopeName = "Staging Test Page (Create New)"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Pause(locator1 = "3000");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deactivateStagingCP(siteName = "Site Name");
	}

	@priority = "3"
	test ModifyInitalPageVariationSetup {
		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.modifyVariation(enableOnPublicPages = "true");
	}

	@description = "This test covers LPS-72893."
	@priority = "4"
	test PublishLayoutIconDeletion {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Page.changeLogoViaPageCP(
			logoFile = "Document_3.png",
			page = "Staging Test Page"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Page.viewLayoutLogoPG(assertLayoutLogoPresent = "true");

		ProductMenu.gotoStagingSite();

		Page.deleteLogoPG(page = "Staging Test Page");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSiteURL(siteName = "Site Name");

		Page.viewLayoutLogoPG();
	}

	@priority = "5"
	test PublishPrivatePage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Page.add(
			pageName = "Private Staging Page",
			sitePagePrivacy = "Private",
			siteScopeSelected = "true"
		);

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(checkPageName = "Private Pages");

		Staging.publishToLive();

		ProductMenu.gotoPrivatePages();

		Page.view(pageName = "Private Staging Page");
	}

	@description = "This is a use case for LPS-80367."
	@priority = "5"
	test PublishWCIncludingTextsAndImages {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title"
		);

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoURLDetail();

		AssertClick(locator1 = "Link#URL", value1 = "URL");

		var dmDocumentURL = selenium.getElementValue("//input[contains(@id,'url')]");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		DMDocument.linkImage(dmDocumentURL = "${dmDocumentURL}");

		PortletEntry.publish();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Portlet.addPG(portletName = "Web Content Display");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite();

		Portlet.viewSpecificPG(portletName = "Web Content Display");

		Navigator.gotoStagedView();

		Portlet.viewSpecificPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			portletName = "Web Content Display",
			webContentTitle = "Web Content Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		WebContent.viewPGViaWCD(
			imageOnLive = "true",
			webContentContent = "Web Content Content"
		);
	}

	@description = "This is a use case for LPS-62869."
	@priority = "3"
	test PublishWCViaRemoteStaging {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";

		Staging.remoteStagingSetUp(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		AssertConsoleTextNotPresent(value1 = "ClassNotFoundException");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");
	}

	@priority = "3"
	test PublishWCWithPagesVariationViaRemoteStaging {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "PGStaging#PublishWCWithPagesVariationViaRemoteStaging";

		Staging.remoteStagingSetUp(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Staging.addSitePagesVariationPG(
			sitePagesVariationName = "Test Site Pages Variation"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		Staging.changeSitePageVariationPG(
			sitePagesVariationMenulistName = "Main Variation",
			sitePagesVariationName = "Test Site Pages Variation"
		);

		AssertElementNotPresent(locator1 = "Portlet#TITLE");

		Staging.changeSitePageVariationPG(
			sitePagesVariationMenulistName = "Test Site Pages Variation",
			sitePagesVariationName = "Main Variation"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Test Variation Page", siteName = "Site Name");

		Staging.addPageVariationPG(pageVariationName = "Test Page Variation");

		Navigator.gotoSitePage(pageName = "Test Variation Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoSitePage(pageName = "Test Variation Page", siteName = "Site Name");

		Staging.changePageVariationPG(
			pageVariationName = "Test Page Variation",
			pageVariationNameMenulistName = "Main Variation"
		);

		AssertElementNotPresent(locator1 = "Portlet#TITLE");

		Staging.changePageVariationPG(
			pageVariationName = "Main Variation",
			pageVariationNameMenulistName = "Test Page Variation"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Staging.markAsReadyForPublication();

		Navigator.gotoSitePage(pageName = "Test Variation Page", siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		Navigator.gotoSitePage(
			pageName = "Test Variation Page",
			siteName = "Remote Site"
		);

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "5"
	test StagingPublishPortlet {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		AssertElementPresent(locator1 = "Home#PORTLET_1");
	}
}