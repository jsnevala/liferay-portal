@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test"
			);

			Site.tearDownCP();

			WebContent.tearDownCP();

			BlogsEntry.tearDownCP();

			MessageboardsThread.tearDownCP();

			Page.tearDownPG();

			User.tearDownCP();

			Role.tearDownCP();
		}
	}

	@priority = "3"
	test AddSitePageXSS {

		var sitePage3Name = '''<script>alert(123);</script>''';

		Page.add(pageName = "Site Page 1");

		Page.add(pageName = "Site Page 2");

		Page.add(pageName = "${sitePage3Name}");

		Navigator.gotoPage(pageName = "Site Page 2");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		Navigator.gotoPage(pageName = "${sitePage3Name}");

		var key_pageName = "${sitePage3Name}";

		AssertTextEquals(locator1 = "Home#PAGE", value1 = "${sitePage3Name}");

		AssertAlertNotPresent();

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@priority = "3"
	test CannotDeleteLastPublicPageOnLiferay {
		SitePageNavigator.gotoPages(page = "Public Pages");

		Page.assertCannotDeleteOnlyPage(pageName = "Welcome");
	}

	@priority = "3"
	test ChangingPageTypeLayoutToLinkToAPageOfThisSiteHidesChildPages {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Site Page1 Name", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Site Page2 Name", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.addChild(
			childSitepageName = "true",
			page = "Public Pages",
			pageName = "Site Page2 Name",
			siteChildPageName = "Child Page Name",
			siteName = "Site Name"
		);

		SitePageNavigator.gotoPages(page = "Public Pages");

		Page.editSelectPageType(
			indexNumber = "3",
			page = "Site Page2 Name",
			pageName = "- - Child Page Name",
			pageType = "Link to a Page of This Site"
		);

		Navigator.gotoSitePage(pageName = "Site Page1 Name", siteName = "Site Name");

		SitePageNavigator.gotoPages(page = "Public Pages");

		Page.viewChildPage(pageName = "Child Page Name");
	}

	@priority = "3"
	test DefaultLanguageWithEmptyFriendlyURLThrowsErrorExceptions {
		Page.add(pageName = "Page Name");

		Navigator.gotoPage(pageName = "Page Name");

		SitePageNavigator.gotoEditPage(page = "Page Name");

		Page.addFriendlyURLLocalizedPG(
			friendlyUrlLocalized = "de_DE",
			localizedFriendlyURL = "/german"
		);

		Page.deleteFriendlyURLPG(friendlyUrlLocalized = "en_US");

		Navigator.gotoPage(pageName = "Page Name");

		AssertConsoleTextNotPresent(
			value1 = "java.lang.StringIndexOutOfBoundsException: String index out of range: -1"
		);

		SitePageNavigator.gotoEditPage(page = "Page Name");

		Page.viewPageFriendlyURLPG(pageName = "page-name");
	}

	@priority = "3"
	test LoadMoreResultsLinkAreMissingAtAllLevelsInTreeView {
		property custom.properties = "layout.manage.pages.initial.children=3";

		for (var pageName : list "Page1 Name,Page2 Name,Page3 Name,Page4 Name") {
			Page.add(pageName = "${pageName}");
		}

		SitePageNavigator.gotoPages(page = "Public Pages");

		Page.viewLoadMoreResultsPages(siteChildPages = "false");

		for (var siteChildPageName : list "Child Page1 Name,Child Page2 Name,Child Page3 Name,Child Page4 Name, Child Page5 Name") {
			Page.addChild(
				page = "Public Pages",
				pageName = "Welcome",
				siteChildPageName = "${siteChildPageName}",
				siteScopeSelected = "true"
			);
		}

		SitePageNavigator.gotoPages(page = "Public Pages");

		Page.viewLoadMoreResultsPages(siteChildPages = "true");
	}

	@priority = "3"
	test SitesPanelLayout {
		var portalURL = PropsUtil.get("portal.url");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.assignRegRoleCP(roleName = "Power User", userScreenName = "usersn");

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		UserBar.gotoProfile();

		SitePageNavigator.gotoPages(page = "My Profile");

		Page.add(pageName = "Page Name");

		Navigator.openSpecificURL(
			url = "${portalURL}/web/usersn/page-name?p_p_id=com_liferay_portal_settings_web_portlet_PortalSettingsPortlet&amp;p_p_state=maximized"
		);

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "You do not have the roles required to access this portlet."
		);

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "5"
	test SitesPrivatePagesPermissions {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SitepagesUsecase#SitesPrivatePagesPermissions";
		property testray.component.names = "Training";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addCommunityCP(membershipType = "Private", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			pageName = "Site Page",
			siteName = "Site Name",
			sitePagePrivacy = "Private"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.addCP(roleName = "Roles Regrole Name");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editUserSiteCP(siteName = "Site Name", userScreenName = "usersn");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.assignRegularRoleCP(
			roleName = "Roles Regrole Name",
			userScreenName = "usersn"
		);

		Navigator.gotoSitePage(pageName = "Home", siteName = "Site Name");

		ProductMenu.gotoPrivatePages();

		PermissionsInline.gotoSitepageCP(pageName = "Site Page", siteName = "Site Name");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleName = "Site Member"
		);

		Role.definePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleName = "Roles Regrole Name"
		);

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		Navigator.openPrivateSitePageURL(pageName = "Site Page", siteName = "Site Name");

		AssertTextNotPresent(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found"
		);

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(pageName = "Home", siteName = "Site Name");

		ProductMenu.gotoPrivatePages();

		PermissionsInline.gotoSitepageCP(
			page = "Private",
			pageName = "Site Page",
			siteName = "Site Name"
		);

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleName = "Roles Regrole Name"
		);

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		Navigator.openPrivateSitePageURL(pageName = "Site Page", siteName = "Site Name");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found"
		);

		AssertTextNotPresent(locator1 = "Home#BREADCRUMB_2", value1 = "Site Page");

		User.firstLoginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@priority = "3"
	test ViewSecureContentAndPageAsGuest {
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "SitepagesUsecase#ViewSecureContentAndPageAsGuest";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.configureMailServerSettings(
			userName = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2")
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeServerResourcesActions(
			actionsDescription = "Reindex all search indexes."
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.assignRegRoleCP(roleName = "Administrator", userScreenName = "usersn1");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			pageName = "Test Private Page",
			siteName = "${siteName}",
			sitePagePrivacy = "Private"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Blog and Message Board Page");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Portlet.addPG(portletName = "Message Boards");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		User.logoutAndLoginPG(
			userLoginEmailAddress = PropsUtil.get("email.address.4"),
			userLoginFullName = "userfn1 userln1"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Blogs.subscribePG();

		MessageboardsPortlet.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Blogs.addEntryWithPermissions(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title G7B2",
			viewableBy = "Site Members"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		MessageboardsThread.addPGWithPermissions(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject G7MB3",
			viewableBySelection = "Site Members"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Pause(locator1 = "30000");

		Gmail.login(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userPassword = PropsUtil.get("email.password.4")
		);

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "G7B2",
			gmailMessageBody = "Blogs Entry Title G7B2",
			gmailMessageTitle = "Test Test Published &quot;Blogs Entry Title G7B2&quot; on ${siteName} Blogs"
		);

		Gmail.openMessageContinueReadingButton(
			contentTitle = "Blogs Entry Title G7B2",
			pageName = "Blog and Message Board Page",
			siteName = "${siteName}"
		);

		var blogEntryURL = selenium.getLocation();

		Close();

		SelectWindow(locator1 = "null");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Test Test",
			gmailAssetType = "G7MB3",
			gmailMessageBody = "MB Thread Message Body",
			gmailMessageTitle = "Message Boards Home - ${siteName} New Message: MB Thread Message Subject G7MB3"
		);

		Gmail.openMessageLink(
			contentTitle = "MB Thread Message Subject G7MB3",
			gmailAssetType = "Message Boards",
			pageName = "Blog and Message Board Page",
			siteName = "${siteName}"
		);

		var messageBoardsThreadURL = selenium.getLocation();

		Close();

		SelectWindow(locator1 = "null");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(
			gmailMessageTitleList = "Test Test Published &quot;Blogs Entry Title G7B2&quot; on ${siteName} Blogs,Message Boards Home - ${siteName} New Message: MB Thread Message Subject G7MB3,Your New Account,Your New Password,G7B2,G7MB3"
		);

		User.logoutPG();

		Navigator.openPrivateURL();

		User.viewLoginPG();

		AssertElementNotPresent(locator1 = "Message#ERROR");

		AssertElementNotPresent(locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR");

		Navigator.openSpecificURL(url = "${blogEntryURL}");

		Alert.viewRequestFailedToComplete();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_2",
			value1 = "You do not have the required permissions."
		);

		Navigator.openSpecificURL(url = "${messageBoardsThreadURL}");

		Alert.viewRequestFailedToComplete();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_2",
			value1 = "You do not have the required permissions."
		);
	}

	@priority = "3"
	test ViewSecureContentAndPageAsSiteMember {
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "SitepagesUsecase#ViewSecureContentAndPageAsSiteMember";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.configureMailServerSettings(
			userName = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2")
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.assignRegRoleCP(roleName = "Administrator", userScreenName = "usersn1");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Site.assignUserSitesCP(siteName = "${siteName}", userScreenName = "usersn2");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea2@liferay.com",
			userScreenName = "usersn2"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			pageName = "Test Private Page",
			siteName = "${siteName}",
			sitePagePrivacy = "Private"
		);

		Page.add(pageName = "Blog and Message Board Page");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Portlet.addPG(portletName = "Message Boards");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		User.logoutAndLoginPG(
			userLoginEmailAddress = PropsUtil.get("email.address.4"),
			userLoginFullName = "userfn1 userln1"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Blogs.subscribePG();

		MessageboardsPortlet.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Blogs.addEntryWithPermissions(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title G7B1",
			viewableBy = "Site Members"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		MessageboardsThread.addPGWithPermissions(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject G7MB2",
			viewableBySelection = "Site Members"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Pause(locator1 = "30000");

		Gmail.login(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userPassword = PropsUtil.get("email.password.4")
		);

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "G7B1",
			gmailMessageBody = "Blogs Entry Title G7B1",
			gmailMessageTitle = "Test Test Published &quot;Blogs Entry Title G7B1&quot; on ${siteName} Blogs"
		);

		Gmail.openMessageContinueReadingButton(
			contentTitle = "Blogs Entry Title G7B1",
			pageName = "Blog and Message Board Page",
			siteName = "${siteName}"
		);

		var blogEntryURL = selenium.getLocation();

		Close();

		SelectWindow(locator1 = "null");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Test Test",
			gmailAssetType = "G7MB2",
			gmailMessageBody = "MB Thread Message Body",
			gmailMessageTitle = "Message Boards Home - ${siteName} New Message: MB Thread Message Subject G7MB2"
		);

		Gmail.openMessageLink(
			contentTitle = "MB Thread Message Subject G7MB2",
			gmailAssetType = "Message Boards",
			pageName = "Blog and Message Board Page",
			siteName = "${siteName}"
		);

		var messageBoardsThreadURL = selenium.getLocation();

		Close();

		SelectWindow(locator1 = "null");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(
			gmailMessageTitleList = "Test Test Published &quot;Blogs Entry Title G7B1&quot; on ${siteName} Blogs, Message Boards Home - ${siteName} New Message: MB Thread Message Subject G7MB2,Your New Account,Your New Password,G7B1,G7MB2"
		);

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea2@liferay.com",
			userLoginFullName = "userfn2 userln2"
		);

		Navigator.openPrivateURL();

		Page.viewSpecificPG(pageNameList = "Test Private Page");

		AssertElementNotPresent(locator1 = "Message#ERROR");

		AssertElementNotPresent(locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR");

		Navigator.openSpecificURL(url = "${blogEntryURL}");

		BlogsNavigator.gotoPG(
			blogEntryURL = "${blogEntryURL}",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title G7B1"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Navigator.openSpecificURL(url = "${messageBoardsThreadURL}");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			messageBoardsThreadURL = "${messageBoardsThreadURL}",
			postCount = "1",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject G7MB2"
		);

		MessageboardsThread.viewPG(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject G7MB2"
		);
	}

	@priority = "5"
	test ViewSecureContentAndPageAsUser {
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "SitepagesUsecase#ViewSecureContentAndPageAsUser";
		property testray.component.names = "Training";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.configureMailServerSettings(
			userName = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2")
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles"
		);

		Role.assignRegRoleCP(roleName = "Administrator", userScreenName = "usersn1");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userScreenName = "usersn1"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea2@liferay.com",
			userScreenName = "usersn2"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			pageName = "Test Private Page",
			siteName = "${siteName}",
			sitePagePrivacy = "Private Pages"
		);

		Page.add(pageName = "Blog and Message Board Page");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Portlet.addPG(portletName = "Message Boards");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		User.logoutAndLoginPG(
			userLoginEmailAddress = PropsUtil.get("email.address.4"),
			userLoginFullName = "userfn1 userln1"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Blogs.subscribePG();

		MessageboardsPortlet.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Blogs.addEntryWithPermissions(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title G7B3",
			viewableBy = "Site Members"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		MessageboardsThread.addPGWithPermissions(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject G7MB4",
			viewableBySelection = "Site Members"
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Pause(locator1 = "30000");

		Gmail.login(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userPassword = PropsUtil.get("email.password.4")
		);

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "G7B3",
			gmailMessageBody = "Blogs Entry Title G7B3",
			gmailMessageTitle = "Test Test Published &quot;Blogs Entry Title G7B3&quot; on ${siteName} Blogs"
		);

		Gmail.openMessageContinueReadingButton(
			contentTitle = "Blogs Entry Title G7B3",
			pageName = "Blog and Message Board Page",
			siteName = "${siteName}"
		);

		var blogEntryURL = selenium.getLocation();

		Close();

		SelectWindow(locator1 = "null");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Test Test",
			gmailAssetType = "G7MB4",
			gmailMessageBody = "MB Thread Message Body",
			gmailMessageTitle = "Message Boards Home - ${siteName} New Message: MB Thread Message Subject G7MB4"
		);

		Gmail.openMessageLink(
			contentTitle = "MB Thread Message Subject G7MB4",
			gmailAssetType = "Message Boards",
			pageName = "Blog and Message Board Page",
			siteName = "${siteName}"
		);

		var messageBoardsThreadURL = selenium.getLocation();

		Close();

		SelectWindow(locator1 = "null");

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(
			gmailMessageTitleList = "Test Test Published &quot;Blogs Entry Title G7B3&quot; on ${siteName} Blogs, Message Boards Home - ${siteName} New Message: MB Thread Message Subject G7MB4,Your New Account,Your New Password,G7B3,G7MB4"
		);

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea2@liferay.com",
			userLoginFullName = "userfn2 userln2"
		);

		Navigator.openPrivateURL();

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found"
		);

		Navigator.openSpecificURL(url = "${blogEntryURL}");

		Alert.viewRequestFailedToComplete();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_2",
			value1 = "You do not have the required permissions."
		);

		Navigator.gotoPage(pageName = "Blog and Message Board Page");

		Navigator.openSpecificURL(url = "${messageBoardsThreadURL}");

		Alert.viewRequestFailedToComplete();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_2",
			value1 = "You do not have the required permissions."
		);
	}

	@priority = "3"
	test WebContentAdministrationSitesPagesPanel {
		Page.add(
			componentName = "Collaboration",
			pageName = "Panel Test Page",
			portletNameList = "Blogs,Message Boards",
			sitePageType = "Panel"
		);

		Page.viewPanelPortletListPG(
			componentName = "Collaboration",
			pageName = "Panel Test Page",
			portletNameList = "Blogs,Message Boards"
		);

		Page.gotoPagePanelPortlet(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "This is Blog Post 1 Content",
			entryTitle = "Blog Post 1"
		);

		Navigator.gotoPage(pageName = "Panel Test Page");

		Page.gotoPagePanelPortlet(portletName = "Blogs");

		BlogsEntry.viewPG(
			entryContent = "This is Blog Post 1 Content",
			entryTitle = "Blog Post 1"
		);

		Page.gotoPagePanelPortlet(portletName = "Message Boards");

		MessageboardsThread.addPG(
			threadBody = "This is Message Boards Thread 1",
			threadSubject = "Thread 1"
		);

		Navigator.gotoPage(pageName = "Panel Test Page");

		Page.gotoPagePanelPortlet(portletName = "Message Boards");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			postCount = "1",
			threadBody = "This is Message Boards Thread 1",
			threadSubject = "Thread 1"
		);

		MessageboardsThread.viewPG(
			postCount = "1",
			threadBody = "This is Message Boards Thread 1",
			threadSubject = "Thread 1",
			userName = "Test Test"
		);
	}

	@priority = "5"
	test WebContentAdministrationSitesPageTypes {
		property testray.component.names = "Training";
		var portalURL = PropsUtil.get("portal.url");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Page Type Test Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Blank Page", siteName = "Page Type Test Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			pageName = "Link to URL Page",
			pageTypeURL = "https://www.google.com/",
			siteName = "Page Type Test Site Name",
			sitePageType = "Link to URL"
		);

		Navigator.gotoSitePage(
			pageName = "Blank Page",
			siteName = "Page Type Test Site Name"
		);

		Page.firstPageCanNotBeOfTypeLinkToURL(pageName = "Blank Page");

		Navigator.gotoSitePage(
			pageName = "Blank Page",
			siteName = "Page Type Test Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			pageName = "Embedded Page",
			pageTypeURL = "http://iscaliforniaonfire.com/",
			siteName = "Page Type Test Site Name",
			sitePageType = "Embedded"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			componentName = "Community",
			pageName = "Panel Page",
			siteName = "Page Type Test Site Name",
			sitePageType = "Panel"
		);

		Page.viewPanelPortletListCP(
			componentName = "Community",
			pageName = "Panel Page",
			portletNameList = "Bookmarks,Friends Directory,My Sites,My Sites Directory,Page Comments,Page Flags,Page Ratings,Portal Directory,Site Members Directory"
		);

		Navigator.openSiteURL(siteName = "Page Type Test Site Name");

		var key_pageName = "Link to URL Page";

		AssertClick(locator1 = "Home#PAGE", value1 = "Link to URL Page");

		AssertLocation(value1 = "https://www.google.com/");

		Navigator.gotoSitePage(
			pageName = "Embedded Page",
			siteName = "Page Type Test Site Name"
		);

		AssertLocation(
			value1 = "${portalURL}/web/page-type-test-site-name/embedded-page"
		);

		SelectFrame(locator1 = "IFrame#EMBEDDED_IFRAME");

		AssertTextEquals.assertPartialText(
			locator1 = "Embedded#EMBEDDED_TEXT_YES",
			value1 = "Yes"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "Embedded#EMBEDDED_TEXT_UPDATED",
			value1 = "updated"
		);

		SelectFrameTop(value1 = "relative=top");

		Navigator.gotoSitePage(
			pageName = "Panel Page",
			siteName = "Page Type Test Site Name"
		);

		Page.viewPanelPortletListPG(
			componentName = "Community",
			pageName = "Panel Page",
			portletNameList = "Bookmarks,Friends Directory,My Sites,My Sites Directory,Page Comments,Page Flags,Page Ratings,Portal Directory,Site Members Directory"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Organization.addCP(orgName = "United States", orgType = "Organization");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(orgName = "United States");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Home", siteName = "United States");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Organization.addCP(orgName = "Canada", orgType = "Organization");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(orgName = "Canada");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(pageName = "Home", siteName = "Canada");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.add(
			pageName = "Page Set Page",
			siteName = "Page Type Test Site Name",
			sitePageType = "Page Set"
		);

		var key_pageName = "Page Set Page";

		AssertElementNotPresent(locator1 = "Home#PAGE");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.addChild(
			page = "Public Pages",
			pageName = "Page Set Page",
			pageTypeURL = "/web/united-states",
			siteChildPageName = "United States",
			siteName = "Page Type Test Site Name",
			sitePageType = "Link to URL"
		);

		Navigator.openSiteURL(siteName = "Page Type Test Site Name");

		var key_pageName = "Page Set Page";

		AssertElementPresent(locator1 = "Home#PAGE");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Page.addChild(
			page = "Public Pages",
			pageName = "Page Set Page",
			pageTypeURL = "/web/canada",
			siteChildPageName = "Canada",
			siteName = "Page Type Test Site Name",
			sitePageType = "Link to URL"
		);

		Navigator.openSiteURL(siteName = "Page Type Test Site Name");

		var key_pageName = "Page Set Page";

		AssertElementPresent(locator1 = "Home#PAGE");

		Page.gotoChildPagePG(
			childPageName = "United States",
			pageName = "Page Set Page"
		);

		AssertLocation(value1 = "${portalURL}/web/united-states");

		AssertTextNotPresent(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found"
		);

		Navigator.openSiteURL(siteName = "Page Type Test Site Name");

		Page.gotoChildPagePG(childPageName = "Canada", pageName = "Page Set Page");

		AssertLocation(value1 = "${portalURL}/web/canada");

		AssertTextNotPresent(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found"
		);
	}
}