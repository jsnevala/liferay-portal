@component-name = "portal-search-ee"
definition {
	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch2";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Elastic Search Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			MessageboardsThread.tearDownCP();

			DMDocument.tearDownCP();

			Page.tearDownPG();
		}
	}

	@description = "This test asserts Elasticsearch clustering to add/remove replicas as nodes are added/removed from the portal cluster. Also, we want to maintain no loss in search functionality as replicas are being added or removed."
	@priority = "5"
	test ElasticsearchClusterSmokeTest {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property test.name.skip.portal.instance = "ElasticsearchEE#ElasticsearchClusterSmokeTest";

		// Verify the total number of Elasticsearch replicas is two as there are two nodes/bundles running

		// LRQA-28998

		/* <execute macro="Elasticsearch#viewClusterStatusViaClusterHealthAPI">
			<var name="numberOfNodes" value="2" />
		</execute> */

		// <execute macro="Elasticsearch#viewReplicaAddedInConsole" />

		// <execute macro="Navigator#openURL" />

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Message Boards"
		);

		MessageboardsThread.addCP(threadBody = "Orange", threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeServerResourcesActions(
			actionsDescription = "Reindex all search indexes."
		);

		Navigator.openURL();

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Navigator.openURL();

		Search.searchPG(searchTerm = "Orange");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Portlet.shutdownSpecificServer(nodePort = "9");

		// Verify the total number of Elasticsearch replicas has decreased to one

		// LRQA-28998

		// <execute macro="Elasticsearch#viewReplicaRemovedInConsole" />

		/* <execute macro="Elasticsearch#viewClusterStatusViaClusterHealthAPI">
			<var name="numberOfNodes" value="1" />
		</execute> */

		// Verify search functionality after a replica has been removed

		Navigator.openURL();

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Navigator.openURL();

		Search.searchPG(searchTerm = "Orange");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);
	}

	@priority = "5"
	test ElasticsearchRemotePortalClusterSmokeTest {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "ElasticsearchEE#ElasticsearchRemotePortalClusterSmokeTest";

		Elasticsearch.viewClusterStatusViaClusterHealthAPI(numberOfNodes = "1");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Message Boards"
		);

		MessageboardsThread.addCP(threadBody = "Orange", threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple"
		);

		Navigator.openURL();

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Navigator.openURL();

		Search.searchPG(searchTerm = "Orange");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		User.logoutPG(password = "test", userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com"
		);

		Portlet.shutdownSpecificServer(nodePort = "8");

		Search.searchPG(searchTerm = "Apple");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);

		Navigator.openSpecificURL(url = "http://localhost:9080");

		Search.searchPG(searchTerm = "Orange");

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Document"
		);

		Search.viewSearchResultsPG(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message"
		);
	}

	@priority = "5"
	test ElasticsearchRemoteWithMarvelAndKibanaAndShieldSmokeTest {
		property elastic.kibana.enabled = "true";
		property elastic.shield.enabled = "true";
		property osgi.app.includes = "portal-search-elasticsearch-marvel";
		property plugins.deployment.type = "osgi";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "ElasticsearchEE#ElasticsearchRemoteWithMarvelAndKibanaAndShieldSmokeTest";

		Page.add(pageName = "Marvel Page");

		Navigator.gotoPage(pageName = "Marvel Page");

		Portlet.addPG(portletName = "Marvel");

		Navigator.gotoPage(pageName = "Marvel Page");

		Marvel.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Marvel Page");

		Marvel.viewAsGuestPG();
	}

	@priority = "5"
	test ElasticsearchRemoteWithMarvelAndKibanaSmokeTest {
		property elastic.kibana.enabled = "true";
		property osgi.app.includes = "portal-search-elasticsearch-marvel";
		property plugins.deployment.type = "osgi";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "ElasticsearchEE#ElasticsearchRemoteWithMarvelAndKibanaSmokeTest";

		Page.add(pageName = "Marvel Page");

		Navigator.gotoPage(pageName = "Marvel Page");

		Portlet.addPG(portletName = "Marvel");

		Navigator.gotoPage(pageName = "Marvel Page");

		Marvel.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Marvel Page");

		Marvel.viewAsGuestPG();
	}
}