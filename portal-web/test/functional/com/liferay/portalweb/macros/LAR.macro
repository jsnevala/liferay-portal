definition {
	macro _export {
		SelectFrame(locator1 = "IFrame#CONFIGURATION_DIALOG");

		if (isSet(larFileName)) {
			Type(locator1 = "ExportImport#EXPORT_FILE_NAME", value1 = "${larFileName}");
		}

		if ("${exportPermissions}" == "true") {
			Check(locator1 = "Checkbox#PERMISSIONS");
		}

		AssertClick(locator1 = "Button#EXPORT", value1 = "Export");

		var key_larFileName = "${larFileName}";

		AssertTextEquals(
			locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful"
		);

		Click(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_DOWNLOAD");

		DownloadTempFile(locator1 = "${larFileName}");

		SelectFrame(value1 = "relative=top");
	}

	macro _exportSite {
		if (isSet(larFileName)) {
			Type(
				locator1 = "SitePagesExport#EXPORT_PROCESS_NAME",
				value1 = "${larFileName}"
			);
		}

		LAR.exportSuccess();
	}

	macro _gotoExportImport {
		Portlet.gotoPortletOptions(
			portletName = "${portletName}",
			portletOption = "Export / Import"
		);

		Pause(locator1 = "5000");
	}

	macro _gotoImportSite {
		if (isSet(siteName)) {
			ProductMenu.gotoSite(site = "${siteName}");
		}

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Import"
		);
	}

	macro _importSite {
		Pause(locator1 = "5000");

		Click(locator1 = "Button#CONTINUE");

		if ("${importPermissions}" == "true") {
			Click(locator1 = "ExportImport#PERMISSIONS_TITLE");

			Check.checkToggleSwitch(locator1 = "Checkbox#PERMISSIONS");
		}

		if ("${privateLayout}" == "true") {
			Click(locator1 = "ExportImport#PRIVATE_LAYOUT");
		}

		if (isSet(checkContentNameList)) {
			Panel.expandPanel(panelHeading = "Content");

			Select(locator1 = "Select#EXPORT_IMPORT_CONTENT", value1 = "Choose Content");

			for (var contentName : list "${checkContentNameList}") {
				var key_contentName = "${contentName}";

				Click(locator1 = "SitePagesExport#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");
			}
		}

		if ("${contentDeletion}" == "true") {
			Panel.expandPanel(panelHeading = "Deletions");

			Check.checkToggleSwitch(locator1 = "ToggleSwitch#DELETE_PORTLET_DATA");
		}

		if ("${mirrorWithOverwriting}" == "true") {
			LAR._mirrorWithOverwriting();
		}

		AssertVisible(locator1 = "Button#BACK");

		AssertClickNoError(
			locator1 = "SitePagesImport#IMPORT_BUTTON",
			value1 = "Import"
		);

		Pause(locator1 = "5000");

		AssertTextEquals(
			locator1 = "SitePagesImport#CURRENT_AND_PREVIOUS_STATUS_1",
			value1 = "Successful"
		);
	}

	macro _mirrorWithOverwriting {
		ScrollWebElementIntoView(
			locator1 = "//div[contains(@class,'panel') and contains(@role,'tablist')]//a[normalize-space(text())='Update Data']"
		);

		Panel.expandPanel(panelHeading = "Update Data");

		Click(locator1 = "ExportImport#UPDATE_DATA_MIRROR_WITH_OVERWRITING_RADIO");
	}

	macro _selectImportFile {
		SelectFrame(locator1 = "IFrame#CONFIGURATION_DIALOG");

		AssertClick(locator1 = "ExportImport#NAVIGATION_IMPORT", value1 = "Import");

		AssertElementPresent(locator1 = "Button#SELECT_FILE");

		if ("${uploadFrom}" == "dependencies") {
			UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = "${larFileName}"
			);
		}
		else {
			UploadTempFile.uploadTempFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = "${larFileName}"
			);
		}

		Pause(locator1 = "5000");

		if ("${cannotImport}" == "true") {
			AssertTextEquals(
				locator1 = "Message#VALIDATION_ERROR_MESSAGE_HEADER",
				value1 = "The file ${larFileName} cannot be imported."
			);
		}
		else if (isSet(importValidationMissingItem)) {
			AssertTextEquals(
				locator1 = "Message#VALIDATION_ERROR_MESSAGE_HEADER",
				value1 = "The file ${larFileName} cannot be imported."
			);

			AssertTextEquals(
				locator1 = "Message#VALIDATION_ERROR_MESSAGE",
				value1 = "An unexpected error occurred while uploading your file."
			);
		}
		else {
			AssertClickNoError(locator1 = "Button#CONTINUE", value1 = "Continue");

			Pause(locator1 = "5000");

			if ("${mirrorWithOverwriting}" == "true") {
				LAR._mirrorWithOverwriting();
			}

			if ("${importPermissions}" == "true") {
				Click(locator1 = "ExportImport#PERMISSIONS_TITLE");

				Check.checkToggleSwitch(locator1 = "Checkbox#PERMISSIONS");
			}

			AssertVisible(locator1 = "Link#BACK");

			AssertClickNoError(locator1 = "Button#IMPORT", value1 = "Import");

			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Successful"
			);

			SelectFrame(value1 = "relative=top");
		}
	}

	macro _selectImportFileSite {
		LexiconEntry.gotoAdd();

		Pause(locator1 = "5000");

		AssertElementPresent(locator1 = "Button#SELECT_FILE");

		Pause(locator1 = "5000");

		if ("${uploadFrom}" == "dependencies") {
			UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = "${larFileName}"
			);
		}
		else {
			UploadTempFile.uploadTempFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = "${larFileName}"
			);
		}

		Pause(locator1 = "180000");

		if (isSet(importValidationMissingItem)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#VALIDATION_ERROR_MESSAGE_HEADER",
				value1 = "cannot be imported."
			);

			AssertTextEquals(
				locator1 = "Message#VALIDATION_ERROR_MESSAGE",
				value1 = "There are missing references that could not be found in the current site. Please import the following elements first:"
			);

			AssertTextEquals.assertPartialText(
				locator1 = "SitePagesImport#VALIDATION_ERROR_LIST_ITEM",
				value1 = "${importValidationMissingItem}"
			);
		}

		if ("importCampaignValidationError" == "true") {
			AssertTextEquals(
				locator1 = "Message#VALIDATION_ERROR_MESSAGE",
				value1 = "The following data will not be imported:"
			);

			AssertTextEquals.assertPartialText(
				locator1 = "SitePagesImport#VALIDATION_ERROR_LIST_ITEM",
				value1 = "Campaign Tracking Action"
			);

			AssertTextEquals.assertPartialText(
				locator1 = "SitePagesImport#VALIDATION_ERROR_LIST_ITEM",
				value1 = "The original Referenced Asset does not exist in the current environment."
			);
		}

		if ("importFail" == "true") {
			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Failed"
			);

			SelectFrame(value1 = "relative=top");
		}
	}

	macro addExportTemplateCP {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "${exportTemplateName}");

		PortletEntry.inputDescription(description = "${exportTemplateDescription}");
	}

	macro configureExportSiteCP {
		LAR.gotoExportSite();

		LexiconEntry.gotoAdd();

		LAR.configureExportSiteOptions(
			checkContentNameList = "${checkContentNameList}",
			checkPageName = "${checkPageName}",
			contentDeletion = "${contentDeletion}",
			contentName = "${contentName}",
			deleteMissingPages = "${deleteMissingPages}",
			exportPermissions = "${exportPermissions}",
			larFileName = "${larFileName}",
			lastDateRange = "${lastDateRange}",
			mainContent = "${mainContent}",
			subContent = "${subContent}",
			uncheckContentNameList = "${uncheckContentNameList}",
			uncheckLogo = "${uncheckLogo}",
			uncheckSubContent = "${uncheckSubContent}",
			uncheckSubSubContent = "${uncheckSubSubContent}"
		);
	}

	macro configureExportSiteOptions {
		if (isSet(larFileName)) {
			Type(
				locator1 = "SitePagesExport#EXPORT_PROCESS_NAME",
				value1 = "${larFileName}"
			);
		}

		if ("${exportPermissions}" == "true") {
			Check.checkToggleSwitch(locator1 = "ExportImport#PERMISSIONS");
		}

		if ("${deleteMissingPages}" == "true") {
			Panel.expandPanel(panelHeading = "Deletions");

			Check.checkToggleSwitch(locator1 = "ToggleSwitch#EXPORT_INDIVIDUAL_DELETIONS");
		}

		if ("${uncheckLogo}" == "true") {
			Uncheck(locator1 = "PagesConfiguration#PAGES_LOGO_CHECKBOX");
		}

		if (isSet(checkPageName)) {
			Click(locator1 = "ExportImport#PAGES_ALL_PUBLIC_PAGES_CHECKBOX");

			Click(locator1 = "ExportImport#PAGES_ALL_PUBLIC_PAGES_CHECKBOX");

			for (var pageName : list "${checkPageName}") {
				var key_pageName = "${pageName}";

				if (IsElementNotPresent(locator1 = "PagesConfiguration#PAGES_SPECIFIC_PAGE_CHECKED")) {
					var key_pageName = "${pageName}";

					Click(locator1 = "PagesConfiguration#PAGES_SPECIFIC_PAGE_NAME");
				}
			}
		}

		if ("${contentDeletion}" == "true") {
			Panel.expandPanel(panelHeading = "Deletions");

			Check.checkToggleSwitch(locator1 = "ToggleSwitch#EXPORT_INDIVIDUAL_DELETIONS");
		}

		if (isSet(checkContentNameList)) {
			Panel.expandPanel(panelHeading = "Content");

			Select(locator1 = "Select#EXPORT_IMPORT_CONTENT", value1 = "Choose Content");

			for (var contentName : list "${checkContentNameList}") {
				var key_contentName = "${contentName}";

				Check(locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");
			}
		}

		if (isSet(uncheckContentNameList)) {
			Panel.expandPanel(panelHeading = "Content");

			Select(locator1 = "Select#EXPORT_IMPORT_CONTENT", value1 = "Choose Content");

			for (var contentName : list "${uncheckContentNameList}") {
				var key_contentName = "${contentName}";

				Uncheck(locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");
			}
		}

		if (isSet(uncheckSubContent)) {
			Click(locator1 = "Select#CONTENT_CHOOSE_CONTENT");

			var key_contentName = "${mainContent}";

			Check(locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");

			AssertClick(
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_CONTENT_CHANGE_LINK",
				value1 = "Change"
			);

			var key_subContent = "${uncheckSubContent}";

			Uncheck(locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_SUBCONTENT_CHECKBOX");

			AssertClick(locator1 = "Button#OK", value1 = "OK");
		}

		if (isSet(uncheckSubSubContent)) {
			Check(locator1 = "Select#CONTENT_CHOOSE_CONTENT");

			var key_contentName = "${contentName}";

			Check(locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");

			AssertClick(
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_CONTENT_CHANGE_LINK",
				value1 = "Change"
			);

			var key_subContent = "${subContent}";
			var key_subSubContent = "${uncheckSubSubContent}";

			Uncheck(
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_SUB_SUBCONTENT_CHECKBOX"
			);

			AssertClick(locator1 = "Button#OK", value1 = "OK");
		}

		if (isSet(contentDateRange)) {
			Click(locator1 = "Select#CONTENT_CHOOSE_CONTENT");

			Click(locator1 = "Radio#CHOOSE_CONTENT_DATE_RANGE_CHANGE");

			var key_contentDateRange = "${contentDateRange}";

			Type(
				locator1 = "Select#DATE_RANGE_START_DATE",
				value1 = "${dateRangeStartDate}"
			);

			Type(locator1 = "Select#DATE_RANGE_END_DATE", value1 = "${dateRangeEndDate}");

			Click(locator1 = "Link#REFRESH_COUNTS");
		}

		if (isSet(lastDateRange)) {
			Click(locator1 = "Select#CONTENT_CHOOSE_CONTENT");

			Click(locator1 = "Radio#RANGE_LAST");

			var key_lastDateRange = "${lastDateRange}";

			Click(locator1 = "Select#LAST_TIME");

			Click(locator1 = "Link#REFRESH_COUNTS");
		}
	}

	macro downloadLar {
		Click(locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_DOWNLOAD");

		DownloadTempFile();
	}

	macro editExportTemplateCP {
		var key_exportTemplateName = "${exportTemplateName}";

		AssertClick(
			locator1 = "SitePagesExport#EXPORT_TEMPLATES_TABLE_NAME",
			value1 = "${exportTemplateName}"
		);

		PortletEntry.inputName(name = "${exportTemplateNameEdit}");

		PortletEntry.inputDescription(description = "${exportTemplateDescriptionEdit}");
	}

	macro exportDDL {
		LAR._gotoExportImport();

		LAR._export(
			exportPermissions = "${exportPermissions}",
			larFileName = "${larFileName}"
		);
	}

	macro exportExportTemplateCP {
		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Export");

		if (isSet(larFileName)) {
			Type(
				locator1 = "SitePagesExport#EXPORT_PROCESS_NAME",
				value1 = "${larFileName}"
			);
		}

		LAR.exportSuccess();

		if (isSet(larFileName)) {
			AssertTextEquals.assertPartialText(
				locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_NAME",
				value1 = "${larFileName}"
			);
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_NAME",
				value1 = "${exportTemplateName}"
			);
		}

		AssertElementPresent(locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_DOWNLOAD");
	}

	macro exportPortlet {
		LAR._gotoExportImport();

		AssertElementPresent(locator1 = "IFrame#DIALOG");

		LAR._export(
			exportPermissions = "${exportPermissions}",
			larFileName = "${larFileName}"
		);

		Click(locator1 = "Icon#CLOSE");
	}

	macro exportSiteCP {
		LAR.gotoExportSite(siteScopeName = "${siteScopeName}");

		Click(locator1 = "SitePagesExport#CUSTOM_EXPORT_BUTTON");

		if ("${privateLayout}" == "true") {
			Click(locator1 = "SitePagesExport#CHANGE_TO_PRIVATE_PAGES");
		}

		LAR._exportSite(larFileName = "${larFileName}");
	}

	macro exportSuccess {
		AssertClick(locator1 = "SitePagesExport#EXPORT_BUTTON", value1 = "Export");

		AssertTextEquals(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful"
		);
	}

	macro exportUserGroups {
		LAR._gotoExportImport();

		LAR._export(
			exportPermissions = "${exportPermissions}",
			larFileName = "${larFileName}"
		);
	}

	macro filterCompletedProcesses {
		Pause(locator1 = "5000");

		Click(locator1 = "Dropdown#FILTER");

		var key_filterValue = "Completed";

		AssertClick(locator1 = "Dropdown#FILTER_VALUES", value1 = "Completed");
	}

	macro getLarFileName {
		var valueName = selenium.getAttribute("//ul/li/div/h5//a@href");

		echo("value name ${valueName}");

		var portalURL = PropsUtil.get("portal.url");

		var larFileName = RegexUtil.replace("${valueName}", "${portalURL}/documents/portlet_file_entry/[0-9]*/([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		echo("lar file name ${larFileName}");

		return "${larFileName}";
	}

	macro gotoExportSite {
		if (isSet(siteScopeName)) {
			ProductMenu.gotoSite(site = "${siteScopeName}");
		}

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);
	}

	macro importPortlet {
		LAR._gotoExportImport();

		LAR._selectImportFile(
			cannotImport = "${cannotImport}",
			importPermissions = "${importPermissions}",
			larFileName = "${larFileName}",
			mirrorWithOverwriting = "${mirrorWithOverwriting}",
			uploadFrom = "${uploadFrom}"
		);

		SelectFrame(value1 = "relative=top");

		Click(locator1 = "Icon#CLOSE");
	}

	macro importSiteCP {
		LAR._gotoImportSite(siteName = "${siteName}");

		LAR._selectImportFileSite(
			importCampaignValidationError = "${importCampaignValidationError}",
			importValidationMissingItem = "${importValidationMissingItem}",
			larFileName = "${larFileName}",
			uploadFrom = "${uploadFrom}"
		);

		if (!((isSet(importValidationMissingItem)) || (isSet(importFail)))) {
			LAR._importSite(
				checkContentNameList = "${checkContentNameList}",
				contentDeletion = "${contentDeletion}",
				contentName = "${contentName}",
				importPermissions = "${importPermissions}",
				larFileName = "${larFileName}",
				privateLayout = "${privateLayout}"
			);
		}
	}

	macro moveToTheRecycleBinExportTemplate {
		var key_exportTemplateName = "${exportTemplateName}";

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Move to the Recycle Bin");

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	macro saveExportTemplateCP {
		Button.clickSave();

		var key_exportTemplateName = "${exportTemplateName}";

		AssertTextEquals(
			locator1 = "SitePagesExport#EXPORT_TEMPLATES_TABLE_NAME",
			value1 = "${exportTemplateName}"
		);

		AssertTextEquals(
			locator1 = "SitePagesExport#EXPORT_TEMPLATES_TABLE_DESCRIPTION",
			value1 = "${exportTemplateDescription}"
		);
	}

	macro searchTemplate {
		Search.searchCP(searchTerm = "${exportTemplateName}");

		var key_exportTemplateName = "${exportTemplateName}";

		AssertTextEquals(
			locator1 = "SitePagesExport#EXPORT_TEMPLATES_TABLE_NAME",
			value1 = "${exportTemplateName}"
		);

		AssertTextEquals(
			locator1 = "SitePagesExport#EXPORT_TEMPLATES_TABLE_DESCRIPTION",
			value1 = "${exportTemplateDescription}"
		);
	}

	macro setupContentTargeting {
		if ("${stagingSetup}" == "true") {
			ProductMenu.gotoSite(site = "Site Name");

			Navigator.gotoStagedView();
		}
		else {
			ProductMenu.gotoSite(site = "Site Name");
		}

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Audience Targeting"
		);

		ContentTargetingUserSegment.addCP(
			userSegmentDescription = "User Segment Description",
			userSegmentName = "User Segment Name"
		);

		PortletEntry.save();

		ProductMenu.gotoSite(site = "Site Name");

		if ("${stagingSetup}" == "true") {
			ProductMenu.gotoSite(site = "Site Name");

			Navigator.gotoStagedView();
		}
		else {
			ProductMenu.gotoSite(site = "Site Name");
		}

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Audience Targeting"
		);

		ContentTargetingCampaign.addCP(
			campaignDescription = "Campaign Description",
			campaignEndDate = "1/1/2099",
			campaignEndTime = "12:00 PM",
			campaignInactive = "${campaignInactive}",
			campaignName = "Campaign Name",
			campaignPriorityField = "3",
			campaignStartDate = "1/1/2015",
			campaignStartTime = "12:00 AM",
			userSegmentSelect = "${userSegmentSelect}"
		);

		ContentTargetingCampaign.saveCP();

		if ("${stagingSetup}" == "true") {
			ProductMenu.gotoSite(site = "Site Name");

			Navigator.gotoStagedView();
		}
		else {
			ProductMenu.gotoSite(site = "Site Name");
		}

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "User Segment Name",
			userSegmentDetailTitle = "${userSegmentDetailTitle}",
			vocabularyName = "User Segment",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		if ("${stagingSetup}" == "true") {
			Navigator.gotoStagedSitePage(
				pageName = "Test Page Name",
				siteName = "Site Name"
			);
		}
		else {
			Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");
		}

		Portlet.addPG(i = "${i}", portletName = "User Segment Content Display");

		Portlet.gotoPortletOptions(
			portletName = "User Segment Content Display",
			portletOption = "Configuration"
		);

		UserSegmentContentDisplayPortlet.configureDisplayContent(
			belongs = "true",
			contentTitle = "Web Content Title",
			contentType = "Basic Web Content",
			doesNotBelong = "${doesNotBelong}",
			rowIndexNumber = "${rowIndexNumber}",
			rowNumber = "1",
			siteScope = "${siteScope}",
			toAll = "true",
			toAny = "${toAny}",
			userSegmentName = "User Segment Name"
		);

		UserSegmentContentDisplayPortlet.savePG();

		if ("${stagingSetup}" == "true") {
			Navigator.gotoStagedSitePage(
				pageName = "Test Page Name",
				siteName = "Site Name"
			);
		}
		else {
			Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");
		}

		Portlet.addPG(i = "${i}", portletName = "Campaign Content Display");

		Portlet.gotoPortletOptions(
			portletName = "Campaign Content Display",
			portletOption = "Configuration"
		);

		CampaignDisplayPortlet.configureCampaignRule(
			campaignName = "Campaign Name",
			contentTitle = "Web Content Title",
			contentType = "Basic Web Content",
			rowNumber = "1"
		);

		CampaignDisplayPortlet.savePG();

		if ("${stagingSetup}" == "true") {
			Navigator.gotoStagedSitePage(
				pageName = "Test Page Name",
				siteName = "Site Name"
			);
		}
		else {
			Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");
		}

		Portlet.addPG(i = "${i}", portletName = "User Segment Content List");
	}

	macro viewExportTemplateCP {
		var key_exportTemplateName = "${exportTemplateName}";

		AssertTextEquals(
			locator1 = "SitePagesExport#EXPORT_TEMPLATES_TABLE_NAME",
			value1 = "${exportTemplateName}"
		);

		AssertTextEquals(
			locator1 = "SitePagesExport#EXPORT_TEMPLATES_TABLE_DESCRIPTION",
			value1 = "${exportTemplateDescription}"
		);
	}

	macro viewProcessesInDescendingOrder {
		Click(locator1 = "Icon#CARET_DESCENDING");
	}

	macro viewProcessesInListView {
		Click(locator1 = "Icon#DISPLAY_STYLE_LIST");

		AssertElementPresent(locator1 = "Icon#DISPLAY_STYLE_LIST_ACTIVE");
	}
}