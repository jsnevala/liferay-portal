definition {
	var formDescription = "Created Form Description";
	var formName = "Created Form Name";

	macro deleteForm {
		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Delete",
			rowEntry = "${formName}"
		);

		Confirm(
			value1 = "Are you sure you want to delete this? It will be deleted immediately."
		);

		Alert.viewSuccessMessage();
	}

	macro editDataProvider {
		FormFields.editText(
			fieldName = "DataProviderPortlet_name",
			fieldValue = "${name}"
		);

		FormFields.editText(fieldName = "$url", fieldValue = "${url}");

		FormFields.editText(fieldName = "$key", fieldValue = "${displayedAttribute}");

		FormFields.editText(fieldName = "$value", fieldValue = "${storedAttribute}");

		FormFields.editText(fieldName = "$username", fieldValue = "${username}");

		var key_fieldName = "$password";

		if (IsElementPresent(locator1 = "FormFields#PASSWORD_FIELD")) {
			FormFields.editPassword(fieldName = "$password", fieldValue = "${password}");
		}
		else {
			FormFields.editText(fieldName = "$password", fieldValue = "${password}");
		}
	}

	macro saveDataProvider {
		SelectFrame(value1 = "relative=top");

		Button.clickSave();

		SelectFrame(locator1 = "IFrame#DDM_DATA_PROVIDER");

		Alert.viewSuccessMessage();
	}

	macro searchFormEntry {
		Type(locator1 = "NavBar#BASIC_SEARCH_FIELD", value1 = "${searchTerm}");

		Click(locator1 = "Icon#BASIC_SEARCH");
	}

	macro teardownForms {
		while (IsElementPresent(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS")) {
			LexiconEntry.gotoEllipsisMenuItemNoError(menuItem = "Delete");

			Confirm(
				value1 = "Are you sure you want to delete this? It will be deleted immediately."
			);

			Alert.viewSuccessMessage();
		}
	}

	macro viewCannotEditFormEntries {
		AssertElementNotPresent(locator1 = "Button#SUBMIT_1");

		AssertElementNotPresent(locator1 = "FormFields#FIELD_ADD");
	}

	macro viewCheckboxEntry {
		FormsAdmin.viewCannotEditFormEntries();

		var key_fieldName = "${fieldName}";

		FormFields.viewCheckboxLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);

		AssertElementPresent(locator1 = "FormFields#CHECKBOX");
	}

	macro viewDateEntry {
		FormsAdmin.viewCannotEditFormEntries();

		FormFields.viewDateLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);

		FormFields.viewDateValue(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}"
		);
	}

	macro viewForm {
		var key_formName = "${formName}";

		AssertTextEquals(
			locator1 = "FormsAdmin#FORMS_TABLE_NAME",
			value1 = "${formName}"
		);

		var key_formDescription = "${formDescription}";

		AssertTextEquals(
			locator1 = "FormsAdmin#FORMS_TABLE_DESCRIPTION",
			value1 = "${formDescription}"
		);

		var key_rowEntry = "${formName}";

		AssertElementPresent(locator1 = "Icon#ROW_VERTICAL_ELLIPSIS");
	}

	macro viewFormTableEntry {
		var key_fieldLabel = StringUtil.lowerCase("${fieldLabel}");
		var key_fieldLabel = StringUtil.replace("${key_fieldLabel}", " ", "-");
		var key_fieldValue = "${fieldValue}";

		AssertTextEquals.assertPartialText(
			locator1 = "FormsAdmin#FORM_ENTRY_TABLE_ENTRY",
			value1 = "${fieldValue}"
		);
	}

	macro viewFormTableEntryNotPresent {
		var key_fieldLabel = StringUtil.lowerCase("${fieldLabel}");
		var key_fieldLabel = StringUtil.replace("${key_fieldLabel}", " ", "-");
		var key_fieldValue = "${fieldValue}";

		AssertElementNotPresent(locator1 = "FormsAdmin#FORM_ENTRY_TABLE_ENTRY");
	}

	macro viewMultilineTextEntry {
		FormsAdmin.viewCannotEditFormEntries();

		FormFields.viewTextLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);

		FormFields.viewMultilineTextValue(
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}"
		);
	}

	macro viewNoFormEntries {
		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No entries were found."
		);
	}

	macro viewParagraphEntry {
		FormsAdmin.viewCannotEditFormEntries();

		FormFields.viewParagraphField(
			fieldTitle = "${fieldTitle}",
			fieldValue = "${fieldValue}"
		);
	}

	macro viewRadioEntry {
		FormsAdmin.viewCannotEditFormEntries();

		FormFields.viewRadioLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);

		FormFields.viewRadioValue(
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}"
		);
	}

	macro viewSelectEntry {
		FormsAdmin.viewCannotEditFormEntries();

		FormFields.viewSelectLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);

		FormFields.viewSelectValue(fieldName = "${fieldName}");
	}

	macro viewTableEntryNotPresent {
		var key_fieldLabel = StringUtil.lowerCase("${fieldLabel}");
		var key_fieldLabel = StringUtil.replace("${key_fieldLabel}", " ", "-");
		var key_fieldValue = "${fieldValue}";

		AssertElementNotPresent(locator1 = "FormsAdmin#FORM_ENTRY_TABLE_ENTRY");
	}

	macro viewTextEntry {
		FormsAdmin.viewCannotEditFormEntries();

		FormFields.viewTextLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);

		FormFields.viewTextValue(
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}"
		);
	}
}