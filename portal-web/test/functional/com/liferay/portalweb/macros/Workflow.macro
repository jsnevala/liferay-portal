definition {
	macro _gotoPendingFilter {
		Pause(locator1 = "5000");

		Click(locator1 = "Dropdown#FILTER");

		AssertClick(
			locator1 = "Dropdown#FILTER_VALUES",
			value1 = "Pending",
			key_filterValue = "Pending"
		);
	}

	macro _tearDownWorkflow {
		if (IsElementPresent(locator1 = "Icon#ROW_VERTICAL_ELLIPSIS")) {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Knowledge Base Article"
			);

			Select(
				locator1 = "WorkflowConfiguration#RESOURCE_TABLE_SELECT",
				value1 = "No Workflow",
				key_workflowResourceValue = "Knowledge Base Article"
			);

			Button.clickSave();
		}

		for (var workflowResourceValue : list "Blogs Entry,Calendar Event,Comments,Message Boards Message,Page Revision,Wiki Page") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "${workflowResourceValue}"
			);

			Select(
				locator1 = "WorkflowConfiguration#RESOURCE_TABLE_SELECT",
				value1 = "No Workflow",
				key_workflowResourceValue = "${workflowResourceValue}"
			);

			Button.clickSave();
		}
	}

	macro _viewActivities {
		AssertClick(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}",
			key_workflowAssetTitle = "${workflowAssetTitle}"
		);

		AssertClick(locator1 = "MyWorkflowTasksTask#ACTIVITIES", value1 = "Activities");

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasksTask#ACTIVITIES_LINE_1",
			value1 = "${workflowActivityComment}"
		);
	}

	macro approveTaskByActions {
		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.gotoTaskAssignedToMeActionsCmd(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		var menuItem = "Approve";

		if (isSet(workflowDefinitionTask)) {
			var menuItem = "${workflowDefinitionTask}";
		}
		else if (isSet(boardWorkflowTask)) {
			var menuItem = "Approve ${boardWorkflowTask}";
		}

		MenuItem.click(menuItem = "${menuItem}");

		if (isSet(workflowActivityComment)) {
			Type.clickAtType(
				locator1 = "MyWorkflowTasks#DIALOG_BOX_COMMENT_FIELD",
				value1 = "${workflowActivityComment}"
			);
		}

		Workflow.confirmAndViewSucessMessageViaActions();

		Pause(locator1 = "1000");

		Workflow.viewCompletedTask(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Pause(locator1 = "1000");

		if (isSet(workflowActivityComment)) {
			Workflow.gotoCompletedFilter();

			Workflow._viewActivities(
				workflowActivityComment = "${workflowActivityComment}",
				workflowAssetTitle = "${workflowAssetTitle}"
			);
		}
	}

	macro approveTaskByDetails {
		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.viewTaskAssignedToMeDetails(
			workflowAssetContent = "${workflowAssetContent}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssignedTo = "${workflowAssignedTo}",
			workflowTask = "${workflowTask}"
		);

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmAndViewSucessMessageViaDetails();

		Workflow.viewCompletedTask(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);
	}

	macro assignByDetails {
		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to...");

		AssertTextEquals(
			locator1 = "DDMEditStructure#ARE_YOU_SURE_DIALOG_BOX_HEADER",
			value1 = "Assign to..."
		);

		SelectFrame(locator1 = "IFrame#SELECT_ASSIGN_TO");

		Select(
			locator1 = "MyWorkflowTasks#DIALOG_BOX_ASSIGN_TO_SELECT",
			value1 = "${user}"
		);

		if (isSet(comment)) {
			Type(
				locator1 = "MyWorkflowTasks#DIALOG_BOX_COMMENT_FIELD",
				value1 = "${comment}"
			);
		}

		Button.clickDone();

		Alert.waitForSuccessMessageHide();
	}

	macro assignToMeTaskByActions {
		Workflow.viewTaskAssignedToMyRoles(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.gotoTaskAssignedToMyRolesActionsCmd(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		MenuItem.click(menuItem = "Assign to Me");

		if (isSet(workflowActivityComment)) {
			IFrame.selectDialogFrame();

			Type.clickAtType(
				locator1 = "MyWorkflowTasks#DIALOG_BOX_COMMENT_FIELD",
				value1 = "${workflowActivityComment}"
			);
		}

		Workflow.confirmAndViewSucessMessageViaActions();

		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		if (isSet(workflowActivityComment)) {
			Workflow._viewActivities(
				workflowActivityComment = "${workflowActivityComment}",
				workflowAssetTitle = "${workflowAssetTitle}"
			);
		}
	}

	macro assignToMeTaskByDetails {
		Workflow.viewTaskAssignedToMyRoles(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.viewTaskAssignedToMyRolesDetails(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmAndViewSucessMessageViaDetails();

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);
	}

	macro configureWorkflow {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${workflowResourceValue}"
		);

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "${workflowResourceValue}"
		);

		Select(
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_SELECT",
			value1 = "${workflowDefinition}",
			key_workflowResourceValue = "${workflowResourceValue}"
		);

		PortletEntry.save();

		Workflow.viewConfigurationSelected(
			workflowDefinition = "${workflowDefinition}",
			workflowResourceValue = "${workflowResourceValue}"
		);
	}

	macro configureWorkflowViaFolderInfo {
		Click(locator1 = "Icon#INFO");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Select(
			locator1 = "AssetWorkflow#ALL_STRUCTURES_WORKFLOW_SELECT",
			value1 = "${workflowDefinition}"
		);

		PortletEntry.save();
	}

	macro configureWorkflowViaPortlet {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Edit");

		Select(
			locator1 = "AssetWorkflow#ALL_STRUCTURES_WORKFLOW_SELECT",
			value1 = "${workflowDefinition}"
		);

		PortletEntry.save();
	}

	macro confirmAndViewSucessMessageViaActions {
		if (IsElementPresent(locator1 = "IFrame#DIALOG")) {
			IFrame.selectDialogFrame();
		}

		AssertElementPresent(locator1 = "Button#DONE");

		Click(locator1 = "Button#DONE");

		Alert.waitForSuccessMessageHide();
	}

	macro confirmAndViewSucessMessageViaDetails {
		if (IsElementPresent(locator1 = "IFrame#DIALOG")) {
			IFrame.selectDialogFrame();
		}

		AssertClick(locator1 = "Button#DONE", value1 = "Done");

		Alert.waitForSuccessMessageHide();
	}

	macro deactivateAddedWorkflowDefinition {
		Click(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_ADDED_DEFINITION_ELLIPSIS"
		);

		Workflow.deactivateWorkflowDefinitionCmd();
	}

	macro deactivateSpecificWorkflowDefinition {
		var key_workflowDefinitionTitle = "${workflowDefinitionTitle}";

		Click(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_SPECIFIC_DEFINITION_ELLIPSIS"
		);

		Workflow.deactivateWorkflowDefinitionCmd();
	}

	macro deactivateWorkflowDefinition {
		Click(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_ADDED_DEFINITION_ELLIPSIS"
		);

		Workflow.deactivateWorkflowDefinitionCmd();
	}

	macro deactivateWorkflowDefinitionCmd {
		MenuItem.clickNoError(menuItem = "Deactivate");

		Confirm(value1 = "Are you sure you want to deactivate this?");

		Alert.waitForSuccessMessageHide();
	}

	macro deleteSpecificWorkflowDefinition {
		Click(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_SPECIFIC_DEFINITION_ELLIPSIS",
			key_workflowDefinitionTitle = "${workflowDefinitionTitle}"
		);

		Workflow.deleteWorkflowDefinitionCmd();
	}

	macro deleteWorkflowDefinition {
		Click(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_DEACTIVATED_DEFINITION_ELLIPSIS"
		);

		Workflow.deleteWorkflowDefinitionCmd();
	}

	macro deleteWorkflowDefinitionCmd {
		MenuItem.clickNoError(menuItem = "Delete");

		Confirm(
			value1 = "Are you sure you want to delete this? It will be deleted immediately."
		);

		Alert.waitForSuccessMessageHide();
	}

	macro gotoAssetViaTableTitle {
		AssertClick(
			locator1 = "MyWorkflowTasks#TABLE_GENERIC_ASSET_TITLE",
			value1 = "${workflowAssetTitle}",
			key_workflowAssetTitle = "${workflowAssetTitle}"
		);
	}

	macro gotoCompletedFilter {
		Pause(locator1 = "5000");

		Click(locator1 = "Dropdown#FILTER");

		AssertClick(
			locator1 = "Dropdown#FILTER_VALUES",
			value1 = "Completed",
			key_filterValue = "Completed"
		);
	}

	macro gotoCompletedTaskAssignedToMePreview {
		AssertClick(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}",
			key_workflowAssetTitle = "${workflowAssetTitle}"
		);

		Workflow.gotoPreviewView();
	}

	macro gotoPreviewEdit {
		Click(locator1 = "WorkflowSubmissionsTask#PREVIEW_EDIT");

		SelectFrame(locator1 = "IFrame#EDIT_ASSET");
	}

	macro gotoPreviewView {
		AssertVisible(locator1 = "WorkflowSubmissionsTask#PREVIEW_VIEW");

		Click(locator1 = "WorkflowSubmissionsTask#PREVIEW_VIEW");

		AssertElementNotPresent(locator1 = "WorkflowSubmissionsTask#PREVIEW_VIEW");
	}

	macro gotoTaskAssignedToMeActionsCmd {
		Click(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ACTIONS",
			key_workflowAssetTitle = "${workflowAssetTitle}",
			key_workflowTask = "${workflowTask}"
		);
	}

	macro gotoTaskAssignedToMyRolesActionsCmd {
		Click(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ACTIONS",
			key_workflowAssetTitle = "${workflowAssetTitle}",
			key_workflowTask = "${workflowTask}"
		);
	}

	macro gotoTaskDetails {
		AssertClick(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}",
			key_workflowAssetTitle = "${workflowAssetTitle}"
		);
	}

	macro gotoViewCompletedAssetViaMySubmissions {
		Workflow.gotoCompletedFilter();

		Click(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			key_workflowAssetTitle = "${workflowAssetTitle}"
		);

		Workflow.gotoPreviewView();
	}

	macro reactivateInactiveWorkflowDefinition {
		var key_workflowDefinitionName = "${workflowDefinitionName}";

		AssertTextEquals(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_ACTIVE",
			value1 = "No"
		);

		Click(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_DEACTIVATED_DEFINITION_ELLIPSIS"
		);

		MenuItem.click(menuItem = "Activate");

		Alert.waitForSuccessMessageHide();

		AssertTextEquals(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_ACTIVE",
			value1 = "Yes"
		);
	}

	macro rejectTaskByActions {
		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.gotoTaskAssignedToMeActionsCmd(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		MenuItem.click(menuItem = "Reject");

		if (isSet(workflowActivityComment)) {
			var key_workflowActivityComment = "${workflowActivityComment}";

			Type.clickAtType(
				locator1 = "MyWorkflowTasks#DIALOG_BOX_COMMENT_FIELD",
				value1 = "${workflowActivityComment}"
			);
		}

		Workflow.confirmAndViewSucessMessageViaActions();

		SelectFrame(value1 = "relative=top");

		Workflow.viewCompletedTask(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);
	}

	macro rejectTaskByDetails {
		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.viewTaskAssignedToMeDetails(
			workflowAssetContent = "${workflowAssetContent}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssignedTo = "${workflowAssignedTo}",
			workflowTask = "${workflowTask}"
		);

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Reject");

		Workflow.confirmAndViewSucessMessageViaDetails();

		SelectFrame(value1 = "relative=top");

		Workflow.viewCompletedTask(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);
	}

	macro resubmitTaskByActions {
		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.gotoTaskAssignedToMeActionsCmd(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		MenuItem.click(menuItem = "Resubmit");

		Workflow.confirmAndViewSucessMessageViaActions();

		Workflow.viewCompletedTask(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);
	}

	macro resubmitTaskByDetails {
		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.viewTaskAssignedToMeDetails(
			workflowAssetContent = "${workflowAssetContent}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssignedTo = "${workflowAssignedTo}",
			workflowTask = "${workflowTask}"
		);

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Resubmit");

		Workflow.confirmAndViewSucessMessageViaDetails();

		Workflow.viewCompletedTask(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);
	}

	macro tearDownPortalWorkflow {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Workflow Configuration"
		);

		Workflow._tearDownWorkflow();

		LexiconEntry.gotoEntryMenuItem(menuItem = "Edit", rowEntry = "User");

		Select(
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_SELECT",
			value1 = "No Workflow",
			key_workflowResourceValue = "User"
		);

		Button.clickSave();
	}

	macro tearDownSiteWorkflow {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow Configuration"
		);

		Workflow._tearDownWorkflow();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		Workflow.configureWorkflowViaFolderInfo(workflowDefinition = "No Workflow");
	}

	macro tearDownSpecificWorkflowDefinition {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Workflow Definition"
		);

		var key_workflowDefinitionTitle = "${workflowDefinitionTitle}";

		while (IsElementPresent(locator1 = "WorkflowDefinition#DEFINITION_TABLE_SPECIFIC_DEFINITION_ELLIPSIS")) {
			Workflow.deactivateSpecificWorkflowDefinition(
				workflowDefinitionTitle = "Join Xor"
			);

			Workflow.deleteWorkflowDefinition();
		}
	}

	macro tearDownWorkflowDefinitionDraftsViaKDCP {
		ProductMenu.gotoPortlet(
			category = "Apps",
			panel = "Control Panel",
			portlet = "Kaleo Designer"
		);

		while (IsElementPresent(locator1 = "KaleoDesigner#DEFINITION_TABLE_DEFINITION_DRAFT_ACTIONS")) {
			KaleoDesigner.deleteTableDefinitionDraftViaKDCP();

			if (IsElementNotPresent(locator1 = "KaleoDesigner#DEFINITION_TABLE_DEFINITION_DRAFT_ACTIONS")) {
				KaleoDesigner.viewNoWorkflowDefinitionsViaKDCP();
			}
		}
	}

	macro tearDownWorkflowDefinitionsViaWorkflowCP {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Workflow Definition"
		);

		while (IsElementPresent(locator1 = "WorkflowDefinition#DEFINITION_TABLE_ADDED_DEFINITION_ELLIPSIS")) {
			Workflow.deactivateAddedWorkflowDefinition();

			Workflow.deleteWorkflowDefinition();
		}
	}

	macro updateDueDateAssignedToMeTaskByActions {
		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.gotoTaskAssignedToMeActionsCmd(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		MenuItem.click(menuItem = "Update Due Date");

		Click(locator1 = "MyWorkflowTasks#DIALOG_BOX_DUE_DATE");

		AssertElementPresent(locator1 = "Calendar#SMALL_CALENDAR_NEXT");

		Click(locator1 = "Calendar#SMALL_CALENDAR_NEXT");

		Click(locator1 = "Calendar#SMALL_CALENDAR_SPECIFIC_DAY", key_dateNumber = "15");

		Type(
			locator1 = "MyWorkflowTasks#DIALOG_BOX_DUE_DATE_TIME",
			value1 = "${workflowDueDateTime}"
		);

		if (isSet(workflowActivityComment)) {
			Type.clickAtType(
				locator1 = "MyWorkflowTasks#DIALOG_BOX_COMMENT_FIELD",
				value1 = "${workflowActivityComment}",
				key_workflowActivityComment = "${workflowActivityComment}"
			);
		}

		Workflow.confirmAndViewSucessMessageViaActions();

		Workflow.viewTaskAssignedToMe(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_DUE_DATE",
			value1 = "Within",
			key_workflowAssetTitle = "${workflowAssetTitle}",
			key_workflowTask = "${workflowTask}"
		);
	}

	macro updateDueDateTaskByActions {
		Workflow.viewTaskAssignedToMyRoles(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		Workflow.gotoTaskAssignedToMyRolesActionsCmd(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		MenuItem.click(menuItem = "Update Due Date");

		Click(locator1 = "MyWorkflowTasks#DIALOG_BOX_DUE_DATE");

		AssertElementPresent(locator1 = "Calendar#SMALL_CALENDAR_NEXT");

		Click(locator1 = "Calendar#SMALL_CALENDAR_NEXT");

		Click(locator1 = "Calendar#SMALL_CALENDAR_SPECIFIC_DAY", key_dateNumber = "15");

		Type(
			locator1 = "MyWorkflowTasks#DIALOG_BOX_DUE_DATE_TIME",
			value1 = "${workflowDueDateTime}"
		);

		if (isSet(workflowActivityComment)) {
			Type.clickAtType(
				locator1 = "MyWorkflowTasks#DIALOG_BOX_COMMENT_FIELD",
				value1 = "${workflowActivityComment}",
				key_workflowActivityComment = "${workflowActivityComment}"
			);
		}

		Workflow.confirmAndViewSucessMessageViaActions();

		Workflow.viewTaskAssignedToMyRoles(
			ddlDataDefinitionName = "${ddlDataDefinitionName}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowTask = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_DUE_DATE",
			value1 = "Within",
			key_workflowAssetTitle = "${workflowAssetTitle}",
			key_workflowTask = "${workflowTask}"
		);
	}

	macro uploadDefinition {
		LexiconEntry.gotoAdd();

		PortletEntry.inputTitle(title = "${workflowDefinitionTitle}");

		UploadCommonFile.uploadCommonFileHidden(
			locator1 = "WorkflowUpload#FILE_UPLOAD",
			value1 = "${workflowDefinitionFile}"
		);

		PortletEntry.save();
	}

	macro viewAssignedToMyRolesTasksCP {
		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_TASK",
			value1 = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		var key_workflowAssetType = "${workflowAssetType}";

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_LAST_ACTIVITY_DATE"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_DUE_DATE"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ACTIONS"
		);
	}

	macro viewCannotRejectTaskByActions {
		Workflow.gotoTaskAssignedToMeActionsCmd(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowTask = "${workflowTask}"
		);

		AssertElementNotPresent(locator1 = "MyWorkflowTasksTask#MENU_REJECT");
	}

	macro viewCannotWithdrawTaskByActions {
		Workflow.gotoCompletedFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#DEFINITION",
			value1 = "${workflowDefinition}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#STATUS",
			value1 = "${workflowTask}"
		);

		AssertElementPresent(locator1 = "WorkflowSubmissions#LAST_ACTIVITY_DATE");

		AssertElementPresent(locator1 = "WorkflowSubmissions#END_DATE");

		AssertElementNotPresent(
			locator1 = "//div[@id='_158_workflowInstancesSearchContainer']//tr[contains(.,'${key_workflowAssetTitle}')]/td[7]/span/a[contains(@id,'menu_withdraw-submission')]/span"
		);

		AssertTextNotPresent(value1 = "Withdraw Submission");
	}

	macro viewCompletedSubmission {
		Workflow.gotoCompletedFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertTextEquals.assertPartialText(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#STATUS",
			value1 = "${workflowStatus}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#DEFINITION",
			value1 = "${workflowDefinition}"
		);

		AssertElementPresent(locator1 = "WorkflowSubmissions#LAST_ACTIVITY_DATE");

		AssertElementPresent(locator1 = "WorkflowSubmissions#END_DATE");
	}

	macro viewCompletedTask {
		Workflow.gotoCompletedFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_TASK",
			value1 = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_LAST_ACTIVITY_DATE"
		);

		AssertElementPresent(locator1 = "MyWorkflowTasks#COMPLETED_TABLE_DUE_DATE");
	}

	macro viewCompletedTasksTaskNotPresentCP {
		Workflow.gotoCompletedFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertElementNotPresent(locator1 = "MyWorkflowTasks#COMPLETED_TABLE_TASK");

		AssertElementNotPresent(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_ASSET_TITLE"
		);

		AssertElementNotPresent(locator1 = "MyWorkflowTasks#COMPLETED_TABLE_ASSET_TYPE");
	}

	macro viewConfigurationSelected {
		var key_workflowResourceValue = "${workflowResourceValue}";

		AssertTextEquals(
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW",
			value1 = "${workflowDefinition}"
		);
	}

	macro viewDefaultMySubmissionsCP {
		Workflow._gotoPendingFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no pending publications requested by me."
		);

		Workflow.gotoCompletedFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no completed publications requested by me."
		);
	}

	macro viewDefaultMyWorkflowTasksCP {
		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no tasks assigned to you."
		);

		Workflow._gotoPendingFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no pending tasks assigned to you."
		);

		Workflow.gotoCompletedFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no completed tasks."
		);

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no tasks assigned to your roles."
		);

		Workflow._gotoPendingFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no pending tasks assigned to your roles."
		);

		Workflow.gotoCompletedFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no completed tasks."
		);
	}

	macro viewDefaultWorkflowSubmissions {
		Workflow._gotoPendingFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no pending publication requests."
		);

		Workflow.gotoCompletedFilter();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no completed publication requests."
		);
	}

	macro viewDefinition {
		var key_workflowDefinitionName = "${workflowDefinitionName}";

		AssertTextEquals(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_NAME",
			value1 = "${workflowDefinitionName}"
		);

		if (isSet(workflowDefinitionTitle)) {
			AssertTextEquals(
				locator1 = "WorkflowDefinition#DEFINITION_TABLE_TITLE",
				value1 = "${workflowDefinitionTitle}"
			);
		}
		else {
			AssertTextEquals(
				locator1 = "WorkflowDefinition#DEFINITION_TABLE_TITLE",
				value1 = "${workflowDefinitionName}"
			);
		}

		AssertTextEquals(
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_ACTIVE",
			value1 = "Yes"
		);
	}

	macro viewMySubmissions {
		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#STATUS",
			value1 = "${workflowTask}"
		);

		AssertElementPresent(locator1 = "WorkflowSubmissions#LAST_ACTIVITY_DATE");

		AssertElementPresent(locator1 = "WorkflowSubmissions#END_DATE");
	}

	macro viewMySubmissionsTaskPreview {
		AssertTextEquals(
			locator1 = "WorkflowSubmissionsTask#PREVIEW",
			value1 = "Preview of ${workflowAssetType}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasksTask#PREVIEW_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "WorkflowSubmissionsTask#PREVIEW_CONTENT",
			value1 = "${workflowAssetContent}"
		);

		SiteAdmin.viewPortletTitle(portletTitle = "${workflowDefinition}");
	}

	macro viewNoDuplicateTaskAssignedToMyRoles {
		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertElementNotPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ASSET_TITLE_DUPLICATE"
		);
	}

	macro viewPendingTasks {
		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_TASK",
			value1 = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#COMPLETED_TABLE_LAST_ACTIVITY_DATE"
		);

		AssertElementPresent(locator1 = "MyWorkflowTasks#COMPLETED_TABLE_DUE_DATE");
	}

	macro viewRejectedTask {
		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "Update";

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_TASK",
			value1 = "Update"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_LAST_ACTIVITY_DATE"
		);

		AssertElementPresent(locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_DUE_DATE");
	}

	macro viewSecondAssetEntryContent {
		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertClick(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TITLE_2",
			value1 = "${workflowAssetTitle}"
		);

		WorkflowAsset.previewViewContent(
			fieldLabel = "${fieldLabel}",
			fieldValue = "${fieldValue}"
		);
	}

	macro viewSubmissionNotPresent {
		Workflow._gotoPendingFilter();

		AssertElementNotPresent(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			key_workflowAssetTitle = "${workflowAssetTitle}"
		);
	}

	macro viewTaskAssignedToMe {
		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		Navigator.gotoNavTab(navTab = "Assigned to Me");

		AssertElementPresent(locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_ACTIVE");

		Workflow._gotoPendingFilter();

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_TASK",
			value1 = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_LAST_ACTIVITY_DATE"
		);

		AssertElementPresent(locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_DUE_DATE");
	}

	macro viewTaskAssignedToMeDetails {
		Navigator.gotoNavTab(navTab = "Assigned to Me");

		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertClick(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		if (isSet(workflowAssignedTo)) {
			AssertTextEquals.assertText(
				locator1 = "MyWorkflowTasksTask#ASSIGNED_TO",
				value1 = "${workflowAssignedTo}"
			);
		}
		else {
			AssertTextEquals.assertText(
				locator1 = "MyWorkflowTasksTask#ASSIGNED_TO",
				value1 = "Test Test"
			);
		}

		var key_workflowTask = "${workflowTask}";

		AssertTextEquals.assertText(
			locator1 = "MyWorkflowTasksTask#STATE",
			value1 = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasksTask#PREVIEW_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasksTask#PREVIEW_CONTENT",
			value1 = "${workflowAssetContent}"
		);
	}

	macro viewTaskAssignedToMyRoles {
		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		Workflow._gotoPendingFilter();

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_TASK",
			value1 = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_LAST_ACTIVITY_DATE"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_DUE_DATE"
		);

		AssertElementPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ACTIONS"
		);
	}

	macro viewTaskAssignedToMyRolesDetails {
		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		AssertClick(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "MyWorkflowTasksTask#ASSIGNED_TO",
			value1 = "Nobody"
		);

		AssertTextEquals(
			locator1 = "MyWorkflowTasksTask#STATE",
			value1 = "${workflowTask}"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "MyWorkflowTasksTask#PREVIEW_TITLE",
			value1 = "${workflowAssetTitle}"
		);
	}

	macro viewTaskHeaderTitle {
		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "${workflowTask}: ${kfProcessName}"
		);
	}

	macro viewTaskNotPresentAssignedToMyRoles {
		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";
		var key_workflowTask = "${workflowTask}";

		AssertElementNotPresent(
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_MY_ROLES_TABLE_TASK"
		);
	}

	macro withdrawTaskByActions {
		Workflow.viewMySubmissions(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowDefinition = "${workflowDefinition}",
			workflowTask = "${workflowTask}"
		);

		Workflow._gotoPendingFilter();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Withdraw Submission");

		AssertNotVisible(locator1 = "Message#SUCCESS");
	}

	macro withdrawTaskByDetails {
		Workflow.viewMySubmissions(
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowDefinition = "${workflowDefinition}",
			workflowTask = "${workflowTask}"
		);

		Workflow._gotoPendingFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertClick(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		Workflow.viewMySubmissionsTaskPreview(
			workflowAssetContent = "${workflowAssetContent}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowDefinition = "${workflowDefinition}"
		);

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Withdraw Submission");

		Alert.viewSuccessMessage();
	}

	macro withdrawTaskCompletedNoByDetails {
		Workflow.gotoCompletedFilter();

		var key_workflowAssetTitle = "${workflowAssetTitle}";

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#DEFINITION",
			value1 = "${workflowDefinition}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#ASSET_TYPE",
			value1 = "${workflowAssetType}"
		);

		AssertTextEquals(
			locator1 = "WorkflowSubmissions#STATUS",
			value1 = "${workflowTask}"
		);

		AssertElementPresent(locator1 = "WorkflowSubmissions#LAST_ACTIVITY_DATE");

		AssertElementPresent(locator1 = "WorkflowSubmissions#END_DATE");

		AssertClick(
			locator1 = "WorkflowSubmissions#ASSET_TITLE",
			value1 = "${workflowAssetTitle}"
		);

		Workflow.viewMySubmissionsTaskPreview(
			workflowAssetContent = "${workflowAssetContent}",
			workflowAssetTitle = "${workflowAssetTitle}",
			workflowAssetType = "${workflowAssetType}",
			workflowDefinition = "${workflowDefinition}"
		);

		AssertElementNotPresent(
			locator1 = "WorkflowSubmissionsTask#MENU_WITHDRAW_SUBMISSION"
		);

		AssertTextNotPresent(value1 = "Withdraw Submission");
	}
}